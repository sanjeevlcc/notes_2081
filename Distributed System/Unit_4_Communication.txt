Unit 4. Communication 5 Hrs.
    4.1 Foundations
    4.2 Remote Procedure Call
    4.3 Message-Oriented Communication
    4.4 Multicast Communication
    4.5 Case Study: Java RMI and MessagePassing Interface (MPI)







================================================
4.1 Foundations
================================================

            
            
            Communication in distributed systems is vital for enabling different 
            components to coordinate and work together effectively. 
            
            It involves the exchange of data and commands between various nodes, processes, or systems.
            
            Understanding the foundational aspects of communication helps 
            in designing robust and efficient distributed systems.







Components of Communication Systems:
------------------------------------
        Nodes:
        ----------
                Definition: Individual devices or processes that participate in the communication.
                Examples: Servers, clients, sensors, and any other computing devices in a network.
                Roles: Nodes can act as senders, receivers, or intermediaries in a communication process.
        
        
        Links:
        ----------
                Definition: The physical or logical pathways that connect nodes.
                Types: Wired (Ethernet), wireless (Wi-Fi, Bluetooth), and virtual (VPN, tunnels).
                Importance: Determines the speed, reliability, and capacity of data transfer between nodes.
                
        
        Messages:
        ----------
                Definition: Units of data exchanged between nodes.
                Format: Structured as packets, frames, or higher-level constructs like JSON or XML.
                Content: Can contain commands, data, or both.
        
        
        Protocols:
        ----------
                Definition: Set of rules that govern communication between nodes.
                Levels: Can operate at different levels of the network stack (e.g., TCP/IP at the transport layer, 
                        HTTP at the application layer).
                Functions: Define how data is formatted, transmitted, received, and acknowledged.
        





Communication Models:
------------------------------
        Client-Server Model:
        --------------------
                Definition: A model where clients request services and servers provide them.
                Structure: Clients initiate communication, and servers wait to respond.
                Examples: Web browsers (clients) requesting pages from web servers.
        
        
        Peer-to-Peer (P2P) Model:
        ------------------------------
                Definition: A decentralized model where each node can act as both client and server.
                Structure: Nodes communicate directly without central coordination.
                Examples: File-sharing networks like BitTorrent.
        
        
        Publish-Subscribe Model:
        ------------------------------
                Definition: A model where publishers send messages to a central broker, and 
                            subscribers receive messages from the broker.
                Structure: Decouples the producers and consumers of messages.
                Examples: Messaging systems like MQTT, Apache Kafka.








            Features:
            ----------------
                Types of Communication:
                ----------------
                    Synchronous: Sender waits for the receiver to respond.
                    Asynchronous: Sender does not wait for the receiver's response.
                    Unicast: One-to-one communication.
                    Multicast: One-to-many communication.
                
                
                Communication Protocols:
                ----------------
                    TCP/IP
                    UDP
                    HTTP
                    WebSockets
            
            
            
            
            
            Advantages:
            ----------------
                Efficiency: 
                    Facilitates fast data exchange and task distribution.
                
                
                Scalability: 
                    Supports the growth of distributed systems by enabling 
                    communication between multiple nodes.
            
            
            
            Disadvantages:
            ----------------
                Complexity: 
                    Managing communication between distributed 
                    components can be challenging.
                
                Reliability: 
                    Ensuring reliable communication in the presence of 
                    network failures can be difficult.
            









        Examples of Communication Systems:
        ------------------------------------
                HTTP/HTTPS:
                ------------
                        Use Case: Web browsing and web services.
                        Features: Stateless, request-response model, secure version (HTTPS) with encryption.
                
                
                WebSockets:
                ------------
                        Use Case: Real-time applications like chat and live updates.
                        Features: Full-duplex communication, low latency, persistent connection.
                
                
                MQTT:
                ------------
                        Use Case: IoT (Internet of Things) applications.
                        Features: Lightweight, publish-subscribe model, low bandwidth usage.
                
                
                SMTP:
                ------------
                        Use Case: Email transmission.
                        Features: Reliable message delivery, supports attachments, text-based protocol.
                
                
                FTP/SFTP:
                ------------
                        Use Case: File transfer.
                        Features: Reliable file transfer, supports authentication, secure version (SFTP) with encryption.
                











        Asynchronous Communication
        ------------------------
                Definition:
                --------------
                    In asynchronous communication, the sender sends a message and does not 
                    wait for the receiver to respond. The sender can continue processing other 
                    tasks while the receiver processes the message independently.
                
                
                
                
                Features:
                --------------
                        Non-blocking Operation: 
                        --------------
                            The sender is not blocked and can perform other tasks after sending the message.
                        
                        Decoupling: 
                        --------------
                            The sender and receiver do not need to be available simultaneously.
                        
                        Message Queues:
                        --------------
                            Often uses message queues to store and forward messages.
                
                
                Advantages:
                --------------
                        Efficiency: 
                        --------------
                            Improves system efficiency by allowing the sender to perform other tasks instead of waiting.
                        
                        
                        Scalability: 
                        --------------
                            Better suited for scalable systems as it decouples sender and receiver operations.
                
                
                
                
                
                
                Disadvantages:
                --------------
                        Complexity: 
                        --------------
                        More complex to implement due to the need for handling message delivery and processing asynchronously.
                
                
                        Delayed Acknowledgement: 
                        ----------------------------
                            The sender does not receive immediate confirmation of message processing.
                
                
                Use Cases:
                --------------
                        Email Systems: 
                            Where messages are sent and received without requiring 
                            the sender and receiver to be online simultaneously.
                        
                        
                        Message-Oriented Middleware:
                            Systems like RabbitMQ or Apache Kafka that handle high-throughput messaging.
                        
                
                
                
        
        
        
        
        Unicast Communication
        ----------------------------
                    Definition:
                    --------------
                        Unicast communication is a one-to-one communication model
                        where a single sender communicates with a single receiver.
                    
                    Features:
                    --------------
                        Direct Communication: The message is sent directly from the sender to the receiver.
                        Unique Addressing: Each message is addressed to a specific receiver.
                        Point-to-Point: Establishes a direct point-to-point communication link.
                    
                    
                    
                    Advantages:
                    --------------
                        Simplicity: Easy to implement and manage due to the direct nature of communication.
                        Efficiency: Efficient for point-to-point communication where only one receiver needs the data.
                    
                    
                    Disadvantages:
                    --------------
                        Limited Scalability:
                            Not suitable for scenarios where multiple receivers 
                            need the same data, as it requires multiple unicast transmissions.
                        
                        
                        Resource Intensive: 
                            Can be resource-intensive if the sender needs to communicate with many receivers individually.
                    
                    
                    Use Cases:
                    --------------
                        Client-Server Communication: Where a client requests data from a server.
                        Peer-to-Peer Applications: Direct communication between two nodes in a network.
                        
                    
            
        
        
        
        
        
        
        Multicast Communication
        ----------------------------
                Definition:
                --------------
                    Multicast communication is a one-to-many communication model
                    where a single sender transmits data to multiple receivers simultaneously.
                
                
                
                
                Features:
                --------------
                    Group Communication: The sender transmits messages to a group of receivers.
                    Efficient Data Distribution: Data is transmitted once and delivered to
                                    multiple receivers, reducing bandwidth usage.
                    Group Management: Requires mechanisms to manage group membership and data delivery.
                
                
                
                Advantages:
                --------------
                    Bandwidth Efficiency: Reduces bandwidth usage by sending data once to multiple receivers.
                    Scalability: Efficiently scales to large numbers of receivers.
                
                
                
                Disadvantages:
                --------------
                    Complexity: More complex to implement and manage due to group management and data delivery mechanisms.
                    Network Support: Requires network infrastructure that supports multicast.
                    
                
                
                Use Cases:
                --------------
                    Live Streaming: Broadcasting live video or audio to multiple users.
                    Stock Market Feeds: Distributing real-time financial data to multiple subscribers.
                    Online Gaming: Sending game state updates to multiple players simultaneously.
                    
            
        












================================================
4.2 Remote Procedure Call
================================================

https://www.geeksforgeeks.org/remote-procedure-call-rpc-in-operating-system/


Remote Procedure Call (RPC) is a communication technology that is 
used by one program to make a request to another program for utilizing 
its service on a network without even knowing the network’s details. 

A function call or a subroutine call are other terms for a procedure call.

It is based on the client-server concept. 

The client is the program that makes the request, and the server is the 
program that gives the service. 

An RPC, like a local procedure call, is based on the synchronous operation 
that requires the requesting application to be stopped until the 
remote process returns its results. 

Multiple RPCs can be executed concurrently by utilizing lightweight processes or
threads that share the same address space. 

Remote Procedure Call program as often as possible utilizes the 
Interface Definition Language (IDL), a determination language for describing a 
computer program component’s Application Programming Interface (API). 

In this circumstance, IDL acts as an interface between machines at either 
end of the connection, which may be running different operating 
systems and programming languages.




Advantages of RPC
-------------------
        Transparency: 
            RPC makes remote calls appear as local calls, hiding 
            the complexity of network communication from the developer.
        
        Simplicity: 
            Simplifies the development of distributed applications
            by providing a straightforward mechanism for invoking remote services.
        
        Modularity: 
            Encourages a modular approach to software design, 
            enabling clear separation of client and server functionalities.
        
        Language Agnostic: 
            RPC systems often support multiple programming 
            languages, allowing for heterogeneous environments.
        
        Scalability: 
            Facilitates distribution of workloads across
            multiple servers, enhancing scalability.



Disadvantages of RPC
-----------------------
        Latency:
            Network communication introduces latency, which can
            affect the performance of applications.
        
        Error Handling:
            Requires robust mechanisms to handle partial failures, 
            such as server unavailability or network issues.
        
        Security: 
            Ensuring secure transmission of data and preventing
            unauthorized access can be challenging.
        
        Complexity in Debugging:
            Debugging distributed systems can be more complex compared
            to local systems due to network-related issues.
        
        Heterogeneity Handling:
            Differences in hardware, operating systems, and data
            representations between client and server need to be managed.










Applications of RPC
----------------------------
        Distributed Computing: 
            RPC is widely used in distributed computing
            environments where tasks are spread across multiple systems.
        
        Microservices Architecture: 
            Facilitates communication between
            microservices in a microservices architecture.
        
        Client-Server Applications:
            Used in traditional client-server 
            applications to enable clients to invoke server-side operations.
        
        Cloud Services:
            Commonly used in cloud services to
            interact with remote APIs and services.
        
        Database Access:
            Enables remote database access and management.




================================================
4.3 Message-Oriented Communication
================================================


https://chaerim-kim.github.io/distributed%20systems/DS-4/






Feature                    · RPC                                     · Message-Oriented Communication         
---------------------------·-----------------------------------·----------------------------------------
Communication Type         · Synchronous (typically)                       · Asynchronous                           
Coupling                   · Tight Coupling                                · Loose Coupling                         
Transparency               · Aims to make remote calls look local          · Explicit message exchange              
Scalability                · Limited due to synchronous nature             · High due to asynchronous nature        
Error Handling             · Complex, requires robust handling             · Built-in mechanisms in messaging systems
Use Cases                  · Distributed computing, Microservices           · Event-driven systems, Real-time processing



Message-oriented communication is a method of communication in distributed systems where messages are sent between applications or services through a messaging system. This method allows for asynchronous communication, meaning the sender and receiver do not need to interact with the message queue at the same time.


Advantages
---------------
Asynchronous Communication: Allows systems to communicate without needing to be active simultaneously, enhancing flexibility and performance.
Loose Coupling: Decouples the sender and receiver, allowing them to evolve independently without affecting each other.
Scalability: Naturally supports scalability, as messages can be processed independently and in parallel.
Reliability: Messaging systems often provide mechanisms for ensuring message delivery, such as persistent queues and acknowledgments.
Fault Tolerance: The decoupled nature and persistent storage of messages help in building fault-tolerant systems, as messages can be retried in case of failures.


Disadvantages
--------------------
Complexity: Requires handling of message order, delivery, and potential duplication, increasing system complexity.
Latency: Asynchronous communication can introduce latency as messages may not be processed immediately.
Infrastructure: Needs additional infrastructure, such as message brokers or queues, which can add operational overhead.
Message Overhead: The format and metadata of messages can introduce overhead compared to direct method calls.
Applications



Applications
Event-Driven Architectures: Used for systems that react to events, such as logging, monitoring, and notification systems.
Microservices Communication: Facilitates communication between microservices, allowing them to remain loosely coupled.
Real-Time Data Processing: Used in real-time systems for processing streams of data, such as in financial services or IoT.
Workflow Automation: Enables the automation of business processes and workflows by passing messages between different components or services.
Distributed Systems: Widely used in distributed systems to coordinate and synchronize operations between different nodes.


================================================
4.4 Multicast Communication
================================================



================================================
4.5 Case Study: Java RMI and MessagePassing Interface (MPI)
================================================





==================================================================
LAB: Implementing a Basic RPC System in Python            
                                        START
==================================================================

In this lab, we will create a simple RPC system 
using Python's xmlrpc library. 

The lab will consist of a server that provides a
service and a client that uses this service.

     



            SERVER: https://killercoda.com/killer-shell-cka/scenario/playground







Step 1: Setting Up the Server
----------------------------------
    Create a file named rpc_server.py.





controlplane $ cat > rpc_server.py 
# rpc_server.py
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
with SimpleXMLRPCServer(('localhost', 9000), requestHandler=RequestHandler) as server:
    server.register_introspection_functions()

    # Define a function
    def add(x, y):
        return x + y

    # Register function
    server.register_function(add, 'add')

    # Run the server's main loop
    print("Serving RPC server on port 9000...")
    server.serve_forever()





Step 2: Setting Up the Client
-------------------------------
    Create a file named rpc_client.py.







controlplane $ cat > rpc_client.py 
# rpc_client.py
import xmlrpc.client

# Create a client
with xmlrpc.client.ServerProxy("http://localhost:9000/RPC2") as proxy:
    # Call the remote function
    result = proxy.add(5, 3)
    print(f"Result of add(5, 3): {result}")






Step 3: Running the Lab
--------------------------
    Open two terminal windows.

    In the first terminal, navigate to the 
    directory containing rpc_server.py and run the server:





terminal1
--------------
controlplane $ python3 rpc_server.py



terminal2
--------------
controlplane $ python3 rpc_client.py








terminal1
--------------
controlplane $ python3 rpc_server.py

                    You should see the message Serving RPC server on port 9000....

terminal2
--------------
controlplane $ python3 rpc_client.py
                
                    You should see the output:
                    Result of add(5, 3): 8  



Explanation
--------------
rpc_server.py:
-------------
    Uses SimpleXMLRPCServer to create an RPC server listening on localhost at port 9000.
    Registers the add function so that it can be called remotely.
    The server enters an infinite loop waiting for client requests.
    

rpc_client.py:
--------------
    Uses xmlrpc.client.ServerProxy to create a client that connects to the server.
    Calls the add function with the parameters 5 and 3.
    Prints the result received from the server.



This simple lab demonstrates the basic concepts of RPC, including
the server providing a service and the client utilizing that service remotely.







==================================================================
LAB: Implementing a Basic RPC System in Python            
                                            END
==================================================================
















==================================================================
LAB: START
==================================================================



==================================================================
LAB: END
==================================================================





==================================================================
LAB: START
==================================================================



==================================================================
LAB: END
==================================================================



==================================================================
LAB: START
==================================================================



==================================================================
LAB: END
==================================================================

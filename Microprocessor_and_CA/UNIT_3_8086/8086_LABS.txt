 

========================================
DOWNLOAD Software for 8086
========================================

GOOGLE : 8086 emulator
	emu8086


https://emu8086-microprocessor-emulator.en.download.it/downloading




Key Features of emu8086
--------------------------
	User-Friendly IDE
		Provides a graphical interface that is easy 
		to navigate, making it accessible for beginners.
	
	Emulator
		Simulates the behavior of the 8086 
		microprocessor, allowing users to run assembly 
		language programs and observe their execution.
	
	Debugger
		Step-by-step execution of programs to observe 
		changes in registers and memory.
		
		Breakpoints and watchpoints to monitor 
		specific conditions and variables.
	
	
	Assembly and Disassembly
		Supports the assembly of source code
		into machine code and disassembly of machine code
		back into source code.
	
	Sample Programs and Tutorials
		Comes with a collection of sample programs
		and detailed tutorials to help users get started
		with 8086 assembly language programming.
	
	
	Compatibility
		Compatible with both DOS and Windows environments, 
		allowing users to run and test their programs on 
		different platforms.





========================================
TABS of emu8086
========================================

NEW
OPEN
SAVE
COMPILE
EMULATE - DEBUG MODE
CALCULATOR
CONVERT




========================================
REGISTERS in 8086
========================================


    GENERAL PURPOSE REG
    --------------------
        AX	Accumulator register (16-bit)
            AH	High byte of AX (8-bit)
            AL	Low byte of AX (8-bit)
            
        BX	Base register (16-bit)
            BH	High byte of BX (8-bit)
            BL	Low byte of BX (8-bit)
            
        CX	Counter register (16-bit)
            CH	High byte of CX (8-bit)
            CL	Low byte of CX (8-bit)
            
        DX	Data register (16-bit)
            DH	High byte of DX (8-bit)
            DL	Low byte of DX (8-bit)




    SEGMENT REG (hold base address)
    ------------
        CS	Code segment register (16-bit)
        DS	Data segment register (16-bit)
        SS	Stack segment register (16-bit)
        ES	Extra segment register (16-bit)





segment offset pointer
(to make 20 bit physical address)
--------------------------------------------   
      SP	Stack pointer (16-bit)
      BP	Base pointer (16-bit)
      SI	Source index (16-bit)
      DI	Destination index (16-bit)
      IP	Instruction pointer (16-bit)




Flags	Flags register (16-bit)
--------------------------------
    CF	Carry flag (bit 0)
    PF	Parity flag (bit 2)
    AF	Auxiliary carry flag (bit 4)
    ZF	Zero flag (bit 6)
    SF	Sign flag (bit 7)
    TF	Trap flag (bit 8)
    IF	Interrupt enable flag (bit 9)
    DF	Direction flag (bit 10)
    OF	Overflow flag (bit 11)




========================================
Physical address(PA) clculation in 8086
A0 - A19 = 20 bit
========================================


		---------------------------------
		seg reg(16)	offset pointer(16)
		---------	------------------
		CS		IP
		SS		SP/BP
		DS		SI
		ES		DI
		---------------------------------


In the 8086 microprocessor, 
physical addresses (PA) are calculated
using a combination of segment and offset addresses. 


	formula:
	.........
	Physical Address (PA) = ( Segment × 10H ) + Offset
	

EXAMPLE 1:
---------
IF CS is 1245h and instruction pointer 1561h. 
Find the physical address PA of intruction?

	(PA) = ( Segment × 10H ) + Offset
	     =  1245 * 10H + 1561H 
	     = 139B1h


1	3	9	B	1 h
0001	0011	1001	1100	0001 B
----------------20 bit-----------------




EXAMPLE 2:
---------
Segment (DS) = 0x3000
Offset (SI) = 0x0020


	PA = (DS × 10H) + SI
	= (0x3000 × 10H) + 0x0020
	= 0x30020

	0x30020
	
	0x" indicates  represented in hexadecimal notation.
	"20030" is the actual memory address.





EXAMPLE 3:
---------
Segment (CS) = 0x8000
Offset (IP) = 0x00A0


	PA = (CS × 10H) + IP
	= (0x8000 × 10H) + 0x00A0
	= 0x800A0




EXAMPLE 4:
---------
Segment (SS) = 0xA000
Offset (SP/BP) = 0x0020
	
	PA = (SS × 10H) + SP/BP
	= (0xA000 × 10H) + 0x0020
	= 0xA020




========================================
WHAT IS PA AND LA?
========================================


Physical Address:
------------------
	A physical address refers to the actual memory 
	location in the computer's physical memory (RAM)
	where data is stored.
	
	In the 8086 architecture, a physical address is 
	formed by combining the contents of a 
	segment register and an offset register

	(PA) = ( Segment × 10H ) + Offset


Logical Address:
------------------
	A logical address is an address generated 
	by the CPU during the execution of a program. 
	It represents the location of data relative to 
	the start of a specific segment.
	
	In the 8086 architecture, a logical address 
	consists of a segment address and an offset address. 
	The segment address identifies a segment in 
	the memory, and the offset address specifies the location 
	of data within that segment.



	Suppose we have the following scenario:
	
		Segment Register (DS) = 0x2000
		Offset Pointer (SI) = 0x0030
	
	
	Logical Address = (Segment × 10H) + Offset
	Logical Address = (0x2000 × 10H) + 0x0030
			= (0x20000) + 0x0030
			= 0x20030
	
		So, the logical address 
		corresponding to DS is 0x20030.
	
	
	Physical Address = (Segment × 10H) + Offset
	Physical Address = (0x2000 × 10H) + 0x0030
			= (0x20000) + 0x0030
			= 0x20030
	
			So, the physical address
			corresponding to DS
			is also 0x20030.








========================================
LAB 1 : ADDITION of 16 bit no
========================================
NEW >> empty WORKSPACE

      .........................
      MOV AX 1234h
      MOV B,4321h
      ADD AX,BX
      HLT      
      .........................EMULATE > PROBLEM (BUG)
      


    .........................
    MOV AX,1234h
    MOV BX,4321h
    ADD AX,BX
    HLT
    ......................... NO PROBLEM , DEBUG





	AX=5555  BX=4321  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	--------
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0008   NV UP EI PL NZ NA PE NC
					    ------
	0100:0008 F4            HLT

                                               




		
		EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
		 
		noname.bin_ -- emu8086 assembler version: 4.08  
		 
		[ 6/9/2024  --  3:15:28 PM ] 
		 
		====================================================================
		[LINE]     LOC: MACHINE CODE                          SOURCE
		====================================================================
		 
		[   1]    0000: B8 34 12                              MOV AX,1234h
		[   2]    0003: BB 21 43                              MOV BX,4321h
		[   3]    0006: 03 C3                                 ADD AX,BX
		[   4]    0008: F4                                    HLT
		[   5]        :                                       
		[   6]        :                                       
		[   7]        :                                       
		[   8]        :                                       
		[   9]        :                                       
		[  10]        :                                       
		[  11]        :                                       
		 
		=======================================================================









========================================
LAB 2 : ADDITION of 16 bit no , reg change
========================================



	MOV AX,1234h
	MOV BX,4321h
	MOV CX,BX
	ADD AX,CX
	HLT


                                         


	====================================================================
	[LINE]     LOC: MACHINE CODE                          SOURCE
	====================================================================
	 
	[   1]    0000: B8 34 12                              MOV AX,1234h
	[   2]    0003: BB 21 43                              MOV BX,4321h
	[   3]    0006: 8B CB                                 MOV CX,BX
	[   4]    0008: 03 C1                                 ADD AX,CX
	[   5]    000A: F4                                    HLT





	AX=1234  BX=0000  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0003   NV UP EI PL NZ NA PO NC
	0100:0003 BB2143        MOV BX, 04321h
	
	AX=1234  BX=4321  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0006   NV UP EI PL NZ NA PO NC
	0100:0006 8BCB          MOV CX, BX
	
	AX=1234  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0008   NV UP EI PL NZ NA PO NC
	0100:0008 03C1          ADD AX, CX
	
	AX=5555  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=000A   NV UP EI PL NZ NA PE NC
	0100:000A F4            HLT
	
	AX=5555  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=000A   NV UP EI PL NZ NA PE NC
	0100:000A F4









========================================
LAB 4 :Data Transfer Program

Transfer a block of byte from source array 
to destination array
========================================
	
	Total array size = 05

	Before execution

	S1 is var		SI is offset

	....................................
	01	02 	03	04	05
	-------------source data ----------


		
			After execution
		
			S2 is var		DI is offset
		
			..................................
			01	02 	03	04	05
			--------destination data -----------






DATA SEGMENT                     ; defining data segment, insert data source
S1 DB 10,1,2,3,4,5,6,7,8,9,10    ;source data                         
S2 DB 10 SUP(0)

DATA ENDS

CODE SEGMENT
ASSUME CS:CODE, DS:DATA

START: MOV AX,DATA
MOV DS,AX
MOV ES,AX
LEA SI,S1
LEA DI,S2
MOV CL,[SI]
MOV CH,00h
INC SI
CLD
REP MOVSB
MOV AC,4C00h
INT 21H  
CODE ENDS
END START




========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================
Instruction Set of 8086
========================================

Instructions are classified on the basis of functions they perform. 
They are categorized into the following main types:





Data Transfer instruction
----------------------------

All the instructions which perform data movement come under this category. 
The source data may be a register, memory location, port etc.
the destination may be a register, memory location or port. 
The following instructions come under this category:


Instruction	Description
----------	------------
MOV		Moves data from register to register, register to memory,
		memory to register, memory to accumulator, accumulator to memory, etc.

LDS		Loads a word from the specified memory locations into specified register. 
		It also loads a word from the next two memory locations into DS register.

LES		Loads a word from the specified memory locations into the specified register. 
		It also loads a word from next two memory locations into ES register.

LEA		Loads offset address into the specified register.

LAHF		Loads low order 8-bits of the flag register into AH register.

SAHF		Stores the content of AH register into low order bits of the flags register.

XLAT/XLATB	Reads a byte from the lookup table.

XCHG		Exchanges the contents of the 16-bit or 8-bit specified register with the
		contents of AX register, specified register or memory locations.

PUSH		Pushes (sends, writes or moves) the content of a specified register 
		or memory location(s) onto the top of the stack.

POP		Pops (reads) two bytes from the top of the stack and keeps them in a 
		specified register, or memory location(s).

POPF		Pops (reads) two bytes from the top of the stack
		and keeps them in the flag register.

IN		Transfers data from a port to the accumulator or AX, DX or AL register.

OUT		Transfers data from accumulator or AL or AX register to an I/O

		port identified by the second byte of the instruction.





Arithmetic Instructions
------------------------

Instructions of this group perform addition, subtraction,
multiplication, division, increment, decrement, comparison,
ASCII and decimal adjustment etc.

The following instructions come under this category:



Instruction		Description
----------------	------------
ADD	Adds data to the accumulator i.e. AL or AX register
	or memory locations.

ADC	Adds specified operands and the carry status
	(i.e. carry of the previous stage).

SUB	Subtract immediate data from accumulator, 
	memory or register.

SBB	Subtract immediate data with borrow from
	accumulator, memory or register.

MUL	Unsigned 8-bit or 16-bit multiplication.

IMUL	Signed 8-bit or 16-bit multiplication.

DIV	Unsigned 8-bit or 16-bit division.

IDIV	Signed 8-bit or 16-bit division.

INC	Increment Register or memory by 1.

DEC	Decrement register or memory by 1.

DAA	Decimal Adjust after BCD Addition: When two 
	BCD numbers are added, 	the DAA is used after ADD or ADC 
	instruction to get correct answer in BCD.

DAS	Decimal Adjust after BCD Subtraction: When 
	two BCD numbers are added, the DAS is used 
	after SUB or SBB instruction to get correct answer in BCD.


AAA	ASCII Adjust for Addition: When ASCII codes
	of two decimal digits are added, the AAA is used 
	after addition to get correct answer in unpacked BCD.

AAD	Adjust AX Register for Division: It converts two unpacked
	BCD digits in AX to the equivalent binary number. 
	This adjustment is done before dividing two unpacked BCD 
	digits in AX by an unpacked BCD byte.


AAM	Adjust result of BCD Multiplication: This instruction is used
	after the multiplication of two unpacked BCD.

AAS	ASCII Adjust for Subtraction: This instruction is used to get
	the correct result in unpacked BCD after the subtraction of the 
	ASCII code of a number from ASCII code another number.

CBW	Convert signed Byte to signed Word.

CWD	Convert signed Word to signed Doubleword.

NEG	Obtains 2's complement (i.e. negative) of the content of 
	an 8-bit or 16-bit specified register or memory location(s).

CMP	Compare Immediate data, register or memory with accumulator,
	register or memory location(s).






Logical Instructions
----------------------
Instruction of this group perform logical 
AND, OR, XOR, NOT and TEST operations. 
The following instructions come under this category:

Instruction		Description
-------------		--------------
AND			Performs bit by bit logical AND operation of 
			two operands and places the result in the specified destination.

OR			Performs bit by bit logical OR operation of 
			two operands and places the result in the specified destination.

XOR			Performs bit by bit logical XOR operation of two 
			operands and places the result in the specified destination.

NOT			Takes one's complement of the content of a 
			specified register or memory location(s).

TEST			Perform logical AND operation of a specified 
			operand with another specified operand.





Rotate Instructions
--------------------
The following instructions come under this category:

Instruction		Description
------------		-------------
RCL			Rotate all bits of the operand left by 
			specified number of bits through carry flag.

RCR			Rotate all bits of the operand right by 
			specified number of bits through carry flag.

ROL			Rotate all bits of the operand left
			by specified number of bits.

ROR			Rotate all bits of the operand right by
			specified number of bits.






Shift Instructions
--------------------

The following instructions come under this category:

Instruction		Description
-------------		-------------
SAL or SHL		Shifts each bit of operand left by specified number 
			of bits and put zero in LSB position.

SAR			Shift each bit of any operand right by specified 
			number of bits. Copy old MSB into new MSB.

SHR			Shift each bit of operand right by specified 
			number of bits and put zero in MSB position.







Branch Instructions
----------------------
It is also called program execution transfer instruction. 
Instructions of this group transfer program execution from
the normal sequence of instructions to the specified
destination or target. 

The following instructions come under this category:

Instruction		Description
----------------	--------------
JA or JNBE		Jump if above, not below, or equal i.e. when CF and ZF = 0

JAE/JNB/JNC		Jump if above, not below, equal or no carry i.e. when CF = 0

JB/JNAE/JC		Jump if below, not above, equal or carry i.e. when CF = 0

JBE/JNA			Jump if below, not above, or equal i.e. when CF and ZF = 1

JCXZ			Jump if CX register = 0

JE/JZ			Jump if zero or equal i.e. when ZF = 1

JG/JNLE			Jump if greater, not less or equal i.e. when ZF = 0 and CF = OF

JGE/JNL			Jump if greater, not less or equal i.e. when SF = OF

JL/JNGE			Jump if less, not greater than or equal i.e. when SF ≠ OF

JLE/JNG			Jump if less, equal or not greater i.e. when ZF = 1 and SF ≠ OF

JMP			Causes the program execution to jump unconditionally to the 
			memory address or label given in the instruction.

CALL			Calls a procedure whose address is given in the instruction and 
			saves their return address to the stack.

RET			Returns program execution from a procedure (subroutine) to the 
			next instruction or main program.

IRET			Returns program execution from an interrupt service 
			procedure (subroutine) to the main program.

INT			Used to generate software interrupt at the desired point in a program.

INTO			Software interrupts to indicate overflow after arithmetic operation.

LOOP			Jump to defined label until CX = 0.

LOOPZ/LOOPE		Decrement CX register and jump if CX ≠ 0 and ZF = 1.

LOOPNZ/LOOPNE		Decrement CX register and jump if CX ≠ 0 and ZF = 0.

		
		Here, CF = Carry Flag
		ZF = Zero Flag
		OF = Overflow Flag
		SF = Sign Flag
		CX = Register








Flag Manipulation and Processor Control Instructions
--------------------------------------------------------

Instructions of this instruction set are related to flag manipulation 
and machine control.

The following instructions come under this category:




Instruction	Description
-----------	-------------
CLC		Clear Carry Flag: This instruction resets the carry flag CF to 0.

CLD		Clear Direction Flag: This instruction resets the direction flag DF to 0.

CLI		Clear Interrupt Flag: This instruction resets the interrupt flag IF to 0.

CMC		This instruction take complement of carry flag CF.

STC		Set carry flag CF to 1.

STD		Set direction flag to 1.

STI		Set interrupt flag IF to 1.

HLT		Halt processing. It stops program execution.

NOP		Performs no operation.

ESC		Escape: makes bus free for external master like a 
		coprocessor or peripheral device.

WAIT		When WAIT instruction is executed, the processor enters 
		an idle state in which the processor does no processing.

LOCK		It is a prefix instruction. It makes the LOCK pin low 
		till the execution of the next instruction.







String Instructions
---------------------

String is series of bytes or series of words stored 
in sequential memory locations. 

The 8086 provides some instructions which handle string 
operations such as string movement, comparison, scan, load and store.

The following instructions come under this category:


Instruction		Description
-------------		-------------
MOVS/MOVSB/MOVSW	Moves 8-bit or 16-bit data from the memory location(s) 
			addressed by SI register to the memory location addressed by DI register.

CMPS/CMPSB/CMPSW	Compares the content of memory location addressed 
			by DI register with the content of memory location addressed by SI register.

SCAS/SCASB/SCASW	Compares the content of accumulator with the 
			content of memory location addressed by DI register in the extra segment ES.

LODS/LODSB/LODSW	Loads 8-bit or 16-bit data from memory location 
			addressed by SI register into AL or AX register.

STOS/STOSB/STOSW	Stores 8-bit or 16-bit data from AL or AX register
			in the memory location addressed by DI register.

REP			Repeats the given instruction until CX ≠ 0

REPE/ REPZ		Repeats the given instruction till CX ≠ 0 and ZF = 1

REPNE/REPNZ		Repeats the given instruction till CX ≠ 0 and ZF = 0





















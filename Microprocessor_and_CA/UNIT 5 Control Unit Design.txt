

UNIT 5 Control Unit Design [7 Hrs.]
        5.1 Control of the processor
        5.2 Hardwired Control Unit(Control unit inputs and logic)
        5.3 Microprogramed control units(Micro instruction and its types)
        5.4 Architecture of micro programmed control unit
        5.5 Microinstruction sequencing and execution
        5.6 Application of hardwired and micro programmed control units







==============================================================
Comparison of computer architecture and computer organization
==============================================================

..................................................................................................
:                  : **Computer Architecture**             : **Computer Organization**             :
..................................................................................................
: **Definition**   : Design and functionality of the       : Operational units and their           :
:                  : computer system.                      : interconnections.                     :
..................................................................................................
: **Focus**        : Abstract aspects of the system.       : Physical aspects of the system.       :
..................................................................................................
: **Perspective**  : Programmer's view (software-centric). : Engineer's view (hardware-centric).   :
..................................................................................................
: **Components**   : Instruction set, addressing modes,    : Control signals, interfaces, memory   :
:                  : data types, CPU design.               : technology, data paths.               :
..................................................................................................
: **Level of**     : High-level design and functionality.  : Low-level implementation and          :
: **Abstraction**  :                                        : efficiency.                           :
..................................................................................................
: **Key Concerns** : How the hardware is controlled by     : How the architectural specifications  :
:                  : software.                             : are realized in hardware.             :
..................................................................................................
: **Examples**     : RISC vs. CISC architectures, ISA      : Data path design, memory hierarchy,   :
:                  : (Instruction Set Architecture).       : I/O mechanisms.                       :
..................................................................................................
: **Interrelation**: Defines what the computer should do.  : Defines how to accomplish the         :
:                  :                                        : architectural goals.                  :
..................................................................................................










WHY Control Unit (CU)???????
-------------------------------

The Control Unit (CU) is a critical component of a CPU that manages the 
execution of instructions by generating control signals. 

The design of the CU impacts:

        Performance – Determines how fast instructions are executed.
                Hardwired CU: Faster (direct hardware implementation).
                
                Microprogrammed CU: Slower (due to microinstruction fetch & decode).
        
        Flexibility – Affects the ability to modify or extend the instruction set.
                Hardwired CU: Difficult to modify (requires hardware changes).
                
                Microprogrammed CU: Easier to update (changes in control memory).
        
        Complexity of Instruction Set    
                RISC (Reduced Instruction Set Computing): Prefers hardwired CU (simple, fixed instructions).
                
                CISC (Complex Instruction Set Computing): Uses microprogrammed CU (supports complex, multi-step instructions).
        
        Cost & Design Effort
                Hardwired CU: Higher initial design cost but efficient for mass production.
                
                Microprogrammed CU: Lower design cost (software-like approach) but requires control memory.
        
        Power Efficiency
                Hardwired CU: More power-efficient (no extra memory access).
                
                Microprogrammed CU: Consumes more power (due to control memory reads).
        






The choice between hardwired and microprogrammed control units depends on:
Speed vs. Flexibility
Instruction Set Complexity
Design & Modification Costs










===============================================================
5.1 Control of the processor
===============================================================

The control unit (CU) is a fundamental component of the 
central processing unit (CPU). 

Its primary role is to direct the operations of the processor, 
ensuring that instructions are executed correctly and efficiently. 

The control unit orchestrates the activities of the CPU by 
managing the flow of data between the CPU, memory, 
and input/output devices.



Key Functions of the Control Unit:
------------------------------------
        Instruction Fetching: 
        ---------------------
                The control unit retrieves instructions from memory. 
                This process involves placing the address of the instruction 
                on the address bus, and reading the instruction from memory
                into the instruction register.
        
        
        Instruction Decoding:
        ---------------------
                The control unit interprets the fetched instruction
                to determine the required operations. 
                This typically involves breaking down the instruction 
                into opcode and operands.
        
        
        Execution Control:
        ---------------------
                The control unit generates the necessary control 
                signals to execute the instruction. 
                These signals direct the ALU, registers, and other
                components to perform specific operations.
        
        
        Data Transfer:
        ---------------------
                The control unit manages data transfer within
                the CPU, between the CPU and memory, and between the
                CPU and I/O devices. 
                This includes operations like reading from or writing to memory.
        
        
        Control Signal Generation:
        -----------------------------
                Based on the decoded instruction, the control unit 
                generates a sequence of control signals that 
                orchestrate the execution of the instruction.


Example:
        Fetch-Decode-Execute Cycle: This is the basic operational 
        process of the CPU. 
        
        The control unit fetches an instruction from memory, decodes 
        it to understand what action is required, and then executes 
        the instruction by generating the appropriate control signals.




EX
-----------------
Instruction	Fetch	                Decode	                        Execute	                        Writeback
-----------------------------------------------------------------------------------------------------------------
MOV A, B	Fetch MOV opcode	Identify B → A transfer        	Enable B’s output & A’s load	None
MVI A, 21H	Fetch MVI + operand	Extract 21H → A	                Place 21H on bus, load A	None
LDA 2000H	Fetch LDA + address	Decode memory read	        MAR=2000H, memory read	        Load data into A






===============================================================
5.2 Hardwired Control Unit(Control unit inputs and logic)
===============================================================
The Hardwired Control Unit uses combinational and sequential 
logic circuits (gates, flip-flops, decoders) to generate control signals.

No software or microcode is involved—signals are generated purely by hardware.

Used in RISC processors due to its speed and simplicity.


A hardwired control unit is a type of control unit where
the control signals are generated by fixed hardware
circuits without using any programmable memory. 

This approach involves using combinational logic 
circuits to produce the control signals required 
for instruction execution.

        https://www.javatpoint.com/design-of-control-unit



Inputs to the Hardwired Control Unit
----------------------------------
The CU takes multiple inputs to generate the correct control signals:

        Instruction Register (IR)
                Contains the opcode of the current instruction.
                Example: For ADD B, the opcode tells the CU to perform addition.
        
        Clock Signal
                Synchronizes the control signal generation with CPU cycles.
        
        Status Flags (Condition Codes)
                Zero (Z), Carry (CY), Sign (S), Overflow (OV)
                Used for conditional branching (e.g., JZ, JC).
        
        Timing Signals (T0, T1, T2, ...)
                Generated by a sequencing counter to manage instruction phases (Fetch, Decode, Execute).
        
        Interrupt Signals
                External signals (e.g., I/O request) that may alter control flow.




Logic Implementation
------------------------------
The CU uses three main logic components:

        Instruction Decoder
                A combinational circuit (often a decoder) that converts the opcode 
                into a set of control lines.
        
                Example:
                        MOV → Activates register transfer control lines.
                        ADD → Activates ALU control lines.
        
        
        Timing Generator (Sequencing Logic)
                A counter + decoder that produces T0, T1, T2,... signals.
                Ensures control signals are issued in the correct order.
        
        
        
        Control Signal Generator
                A PLA (Programmable Logic Array) or ROM-based logic that combines:
                        Decoded opcode
                        Timing signals
                        Status flags
        
                Outputs the final control signals (e.g., RegWrite, MemRead, ALUOp).



Example: Control Signal Generation for ADD B
---------------------------------------------

                Fetch Phase (T0):
                        PC → MAR, MemRead, IR ← Data Bus
                
                Decode Phase (T1):
                        Opcode ADD is decoded → ALU operation selected.
                
                Execute Phase (T2):
                        B → ALU input, A → ALU input, ALUOp=ADD
                        Result stored in a temporary register.
                
                Writeback Phase (T3):
                        Temp → A, RegWrite signal activated.
                
                



Advantages & Disadvantages
----------------------------------
        Advantages	                                Disadvantages
        -----------                                -----------------------
✔ Faster execution (no microcode lookup)	❌ Inflexible (hard to modify)
✔ Lower latency (direct hardware control)	❌ Complex design (more gates)
✔ Used in RISC (simple instructions)	        ❌ Costly for CISC (many instructions)




Applications
RISC processors (ARM, MIPS) – Simple, fixed-length instructions.
Embedded systems – Where speed and determinism are critical.











===============================================================
5.3 Microprogramed control units(Micro instruction and its types)
===============================================================



Overview
----------
        A Microprogrammed Control Unit (MCU) uses stored microinstructions (in Control Memory) 
                to generate control signals.
        More flexible than hardwired control but slower due to memory access.
        Commonly used in CISC processors (e.g., x86).






Microinstruction Basics
-----------------------
        (A) What is a Microinstruction?
                A low-level instruction that defines control signals for one CPU cycle.
                Stored in Control Memory (ROM/PROM).
        
                Example:
                        Microinstruction Format:
                        | ALU_Op | RegWrite | MemRead | MemWrite | Next_Address |
        
        
        
        (B) Microprogram Execution Flow
                Fetch Macro-Instruction (e.g., ADD B) → Decoded to a starting microaddress.
                Sequencer fetches microinstructions from Control Memory.
                Control Signals are activated based on the microinstruction.
                Next Microaddress is determined (sequential or branch).







Types of Microinstructions
----------------------------
Microinstructions can be classified based on encoding style:

(A) Horizontal Microinstructions
Features:
        One bit per control signal (long microinstruction word).
        Highly parallel (multiple operations in one cycle)
        No decoding needed → faster but wider memory.
        
        Example:
                | ALU_ADD (1) | RegWrite (1) | MemRead (0) | MemWrite (0) | ... |



(B) Vertical Microinstructions
Features:
        Encoded fields (shorter microinstruction word).
        Requires decoding logic → slower but compact.
        Limited parallelism (only a few operations per cycle).
        
        Example:
                | ALU_Op (2 bits) | Mem_Op (2 bits) | ... |






Comparison Table
------------------
Feature	                Horizontal	        Vertical
----------             -------------------      ----------------
Control Bits	        One per signal (wide)	Encoded (narrow)
Speed	                Faster (no decode)	Slower (needs decode)
Flexibility	        High parallelism	Limited parallelism
Memory Usage	        Large	                Compact






Microinstruction Sequencing
--------------------------------
Microinstructions are executed in two main ways:

(A) Sequential Execution
        Default flow: Next microaddress = Current + 1
        Used for linear operations (e.g., MOV, ADD).

(B) Branching
        Based on:
                Condition flags (Zero, Carry).
                Opcode type (Jump, Call).
        
        Example:
        If (ZeroFlag == 1) → Jump to Microaddress 25  
        Else → Continue sequentially  
        



Advantages & Disadvantages
--------------------------------
        Advantages	                              Disadvantages
     ---------------------                        ------------------------
✔ Flexible (easy to modify)	                ❌ Slower (memory access)
✔ Simpler design (software-like)	        ❌ Higher latency
✔ Good for CISC (complex instructions)	        ❌ Needs extra memory



Applications
-----------------
CISC processors (Intel x86, IBM zSeries).
Legacy systems where instruction sets evolve.



















===============================================================
5.4 Architecture of micro programmed control unit
===============================================================

The Microprogrammed Control Unit (MCU) uses stored microinstructions to 
generate control signals. It consists of several key components that work 
together to execute instructions efficiently.


+-------------------+       +-------------------+       +-------------------+
|                   |       |                   |       |                   |
|   Control Memory  |------>|  Microinstruction |------>| Control Signal    |
|   (ROM/PROM)      |       |   Register (MIR)  |       | Generator         |
|                   |       |                   |       |                   |
+-------------------+       +-------------------+       +-------------------+
       ^                                                  |
       |                                                  v
+-------------------+                             +-------------------+
|                   |                             |                   |
|   Microprogram    |<----------------------------| Status Flags      |
|   Counter (µPC)   |                             | (Zero, Carry, etc)|
|                   |                             |                   |
+-------------------+                             +-------------------+
       ^
       |
+-------------------+
|                   |
|   Branch Logic    |
|   (Sequencer)     |
|                   |
+-------------------+


Key Components & Their Functions
----------------------------------
        (A) Control Memory (Microprogram Memory)
                Stores microinstructions (like firmware).
                Typically implemented using ROM/PROM (non-volatile).
                Each microinstruction defines control signals for one CPU cycle.
        
        
        
        (B) Microinstruction Register (MIR)
                Holds the current microinstruction fetched from Control Memory.        
                Outputs control signals to the datapath.
        
        
        
        (C) Microprogram Counter (µPC)
                Acts like a program counter for microinstructions.
                Points to the next microinstruction address in Control Memory.
                Can be incremented sequentially or updated via branching.
        
        
        
        
        
        (D) Branch Logic (Sequencer)
                Determines the next microinstruction address based on:        
                        Condition flags (Zero, Carry, Overflow).
                        Opcode (for instruction-specific branching).
                
                Can perform:
                        Sequential execution (µPC + 1).
                        Conditional jumps (e.g., if ZeroFlag=1, jump to address X).
                        Subroutine calls (for complex instructions).
        


        (E) Control Signal Generator
                Decodes the microinstruction and activates control signals:
                        Register Load/Store (RegWrite, RegRead).
                        ALU Operations (ADD, SUB, SHIFT).
                        Memory Access (MemRead, MemWrite).





How It Works: Step-by-Step Execution
-------------------------------------

Example: Executing ADD B
        Fetch Macro-Instruction
                CPU fetches ADD B → Opcode decoded to a starting microaddress in Control Memory.
        
        Microinstruction Fetch
                µPC loads the first microinstruction → Stored in MIR.
        
        Control Signal Activation
                MIR sends signals:
                        RegRead B (Read value from Register B).
                        ALU_Op = ADD.
        
        Next Microinstruction
                Branch Logic checks if more steps are needed.
                µPC updates (sequentially or via branch).
        
        Result Storage
                Final microinstruction writes result back to Register A.





Types of Microprogrammed Control Units
--------------------------------------
        (A) Horizontal Microprogramming
                Wide microinstruction word (1 bit per control signal).
                Highly parallel (multiple operations per cycle).
                Used in high-speed systems.
        
        (B) Vertical Microprogramming
                Narrow microinstruction word (encoded fields).
                Requires decoding → slower but compact.
                Used in cost-sensitive designs.





Advantages & Disadvantages
----------------------------------
        Advantages	                                Disadvantages
✔ Flexible (easy to update microcode)	        ❌ Slower than hardwired CU
✔ Simpler hardware design	                ❌ Extra memory needed (Control Store)
✔ Supports complex instructions (CISC)	        ❌ Higher latency due to microinstruction fetch




Applications
--------------
        CISC Processors (Intel x86, IBM Mainframes).
        Legacy Systems (where instruction sets evolve).
        FPGA-based Controllers (reconfigurable designs).
        












===============================================================
5.5 Microinstruction sequencing and execution
===============================================================












===============================================================
5.6 Application of hardwired and micro programmed control units
===============================================================

The choice between Hardwired Control and Microprogrammed Control depends 
on factors like speed, flexibility, complexity, and cost. Below is a detailed
comparison of their applications.

1. Hardwired Control Unit
-----------------------
Applications
✅ RISC Processors (ARM, MIPS, RISC-V)
        Simple, fixed-length instructions.
        Fast execution (no microcode overhead).

✅ High-Speed Processors
        Used in superscalar & pipelined CPUs where speed is critical.

✅ Embedded Systems
        Microcontrollers (e.g., AVR, PIC) where deterministic timing is required.

✅ FPGA-Based Designs
        Custom hardware accelerators benefit from hardwired logic.





Advantages
--------------
✔ Faster execution (no microinstruction fetch delay).
✔ Lower power consumption (no control memory access).
✔ Better for simple, fixed instruction sets.

Disadvantages
---------------
❌ Inflexible (modifications require hardware changes).
❌ Complex design for CISC-like instruction sets.









2. Microprogrammed Control Unit
Applications
--------------
✅ CISC Processors (Intel x86, IBM zSeries)
        Supports complex, multi-cycle instructions (e.g., MUL, string operations).

✅ Legacy & Evolving Architectures
        Easy to update via microcode patches (e.g., bug fixes).

✅ Educational & Prototyping Systems
        Easier to modify than hardwired designs.

✅ FPGA-Based Reconfigurable Systems
        Allows dynamic updates without hardware changes.





Advantages
--------------
✔ Flexible (can modify control logic via firmware updates).
✔ Simpler hardware design (control stored in memory).
✔ Better for complex, variable-length instructions.

Disadvantages
---------------
❌ Slower (extra latency due to microinstruction fetch).
❌ Higher power consumption (control memory access).






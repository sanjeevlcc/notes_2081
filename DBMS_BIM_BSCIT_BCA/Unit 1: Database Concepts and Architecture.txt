


Unit 1: Database Concepts and Architecture 4 LHs

      Database, 
      Database Management System, 
      Database Users, 
      Database Administrator, 
      advantages of Databases; 
      Data Models, 
      Schemas, and Instances; Three-Schema
      Architecture and Data Independence; 
      Database Languages and Interfaces; 
      the Database System Environment; 
      Centralized and Client/Server Architectures for DBMSs; 
      Classification of Database Management Systems.


-----------------------
root ➜ ~ $ git clone https://github.com/sanjeevlcc/crud.git
root ➜ ~ $ cd crud/
root ➜ ~/crud (main) $ ls
root ➜ ~/crud (main) $ docker-compose up -d

GO on brovser
----------------------

root ➜ ~ $ git clone https://github.com/nisheshthakuri/devopsdocker.git
root ➜ ~ $ cd devopsdocker/
root ➜ ~/devopsdocker (main) $ ls


=======================================================
Data VS Information
=======================================================

Aspect	      Data	                              Information
-------          -------                              -------------
Definition	      Raw, unprocessed            	      Processed, organized
                  facts and figures                   data with meaning

Nature	      Raw and unorganized	            Processed and organized

Context	      Lacks context and meaning	      Has context and meaning

Usage	            Input for processing	            Used for decision-making

Form	            Numbers, text, images, etc.	      Reports, summaries, visualizations

Dependence	      Independent facts and figures	      Dependent on data

Example	      23, 42, "John Doe",                  "Average temperature is 23°C",
                  "2024-06-11"	                   "John Doe born on June 11, 2024"




                      Types of Data
                  +---------------------------+
                  |           Data            |
                  +---------------------------+
                  | - Structured Data         |
                  |   (Tables, Spreadsheets)  |
                  +---------------------------+
                  | - Unstructured Data       |
                  |   (Text, Images, Videos)  |
                  +---------------------------+
                  | - Semi-Structured Data    |
                  |   (JSON, XML, YAML)             |
                  +---------------------------+



            
                               Data to Information Transformation
            +---------+      +-----------+       +----------+      +-------------+
            |  Data   | ---> | Processing | ---> | Analysis | ---> | Information |
            +---------+      +-----------+       +----------+      +-------------+
            | Raw     |      | Organizing|      | Patterns |      | Contextual   |
            | Facts   |      | Structuring|     | Insights |      | Meaningful   |
            +---------+      +-----------+      +----------+      +-------------+



+-----------------+              +-----------------+              +-----------------+              +-----------------+              +-----------------+              +-----------------+
|    Database     |              |      File       |              |     Record      |              |      Field      |              |   Character     |              |      Bit        |
| (Collection of  |   --->       | (Collection of  |  --->        | (Collection of  |   --->       | (Collection of  |   --->       | (Collection of  |   --->       |   (0 or 1)      |
|   Files/Tables) |              |    Records)     |              |    Fields)      |              |   Characters)   |              |      Bits)      |              |                 |
+-----------------+              +-----------------+              +-----------------+              +-----------------+              +-----------------+              +-----------------+



=======================================================
Database
=======================================================

    A database is a systematic collection of data that is organized 
    so that it can be easily accessed, managed, and updated. 
    
    Databases are used to store large amounts of information in a 
    way that supports efficient retrieval and manipulation. 
    
    Examples include customer databases, product inventories, and transactional records.



    Key Characteristics of a Database:
    -----------------------------------
      Structured: Data is organized in tables, rows, and columns.

      Persistent: Data remains stored permanently until explicitly deleted.

      Consistent: Maintains data integrity and accuracy.

      Accessible: Data can be efficiently retrieved and manipulated.

                +------------------------+
                |       Database         |
                +------------------------+
                |   Structured Data      |
                | - Tables               |
                | - Rows                 |
                | - Columns              |
                +------------------------+
                |   Persistent Storage   |
                | - Retains data         |
                | - Until deleted        |
                +------------------------+
                |   Consistency          |
                | - Data Integrity       |
                | - Accuracy             |
                +------------------------+
                |   Accessibility        |
                | - Efficient Retrieval  |
                | - Manipulation         |
                +------------------------+




=======================================================
Database Management System (DBMS)
=======================================================

    A Database Management System (DBMS) is software designed
    to define, create, maintain, and control access to databases. 
    
    The DBMS serves as an interface between the end-users and the database,
    ensuring that data is consistently organized and easily accessible.



    Key Functions of a DBMS:
    --------------------------

        Data Definition: 
        -------------------
        Allows the creation, modification, and removal of 
        database structures (tables, indexes, etc.).


        Data Manipulation: 
        -------------------
        Supports querying, inserting, updating, and deleting data.
        
        
        Data Security:
        -------------------
        Enforces data access controls to ensure data 
        ecurity and privacy.
        
        Data Integrity:
        -------------------
        Maintains data accuracy and consistency.
    
        Data Backup and Recovery: 
        -----------------------
        Provides mechanisms to back up data and recover it 
        in case of loss or corruption.
        
        Concurrency Control: 
        -------------------
        Manages simultaneous data access to ensure transaction integrity.
    

                  +------------------------+
                  |  Database Management   |
                  |       System (DBMS)    |
                  +------------------------+
                  |   Data Definition      |
                  | - Create Structures    |
                  | - Modify Structures    |
                  | - Remove Structures    |
                  +------------------------+
                  |   Data Manipulation    |
                  | - Query Data           |
                  | - Insert Data          |
                  | - Update Data          |
                  | - Delete Data          |
                  +------------------------+
                  |   Data Security        |
                  | - Access Control       |
                  | - User Permissions     |
                  +------------------------+
                  |   Data Integrity       |
                  | - Enforce Rules        |
                  | - Maintain Consistency |
                  +------------------------+
                  |   Backup and Recovery  |
                  | - Backup Data          |
                  | - Recover Data         |
                  +------------------------+
                  |   Concurrency Control  |
                  | - Manage Access        |
                  | - Ensure Transactions  |
                  +------------------------+
                   Diagram: DBMS Architecture   







=======================================================
Tier Architecture

DBMS in Real-Time Systems: 1-Tier, 2-Tier, and 3-Tier Architectures
=======================================================


1-Tier Architecture
---------------------
            In a 1-tier architecture, the database and the application 
            reside on the same system. 
            
            The user interacts directly with the database.
            
            Personal Desktop Applications

                  +---------------------+
                  | User Application    |
                  | (DBMS & Application)|
                  |    (Same System)    |
                  +---------------------+


2-Tier Architecture
            In a 2-tier architecture, the application (client) 
            communicates directly with the database system (server). 
            The user interface is on the client side, while the 
            database resides on the server side.

            Client-Server Applications:


            +---------------------+       +---------------------+
            |      Client         |       |       Server        |
            |  (User Interface)   | <-->  |      Database       |
            +---------------------+       +---------------------+





3-Tier Architecture
            In a 3-tier architecture, the system is divided into three layers: 
            presentation, application (logic), and data. 
            
            The client interacts with the application server, 
            which then communicates with the database server.
            
            Web-Based Applications
            
            +---------------------+       +---------------------+       +---------------------+
            |      Client         |       |  Application Server |       |     Database        |
            | (Presentation Layer)| <-->  | (Logic Layer)       | <-->  |     (Data Layer)    |
            +---------------------+       +---------------------+       +---------------------+
            








=======================================================
Applications of Database Management Systems (DBMS)
=======================================================
      Database Management Systems (DBMS) are widely used across various 
      industries due to their ability to efficiently manage large volumes 
      of data and ensure data integrity, security, and accessibility. 

      Here are some key applications of DBMS:



Banking and Finance
-----------------------
              
          +-----------------------------+
          |      Banking and Finance    |
          +-----------------------------+
          |  Customer Data Management   |
          | - Accounts, Personal Info   |
          | - Transaction Histories     |
          +-----------------------------+
          |  Transaction Management     |
          | - Deposits, Withdrawals     |
          | - Transfers, Transactions   |
          +-----------------------------+
          |  Loan Management            |
          | - Applications, Approvals   |
          | - Disbursements, Repayments |
          +-----------------------------+
          |  Risk Management            |
          | - Risk Analysis             |
          | - Fraud Detection           |
          | - Compliance Reporting      |
          +-----------------------------+


Healthcare
-----------
          +-----------------------------+
          |          Healthcare         |
          +-----------------------------+
          |  Patient Records Management |
          | - Patient Information       |
          | - Medical Histories         |
          | - Treatment Plans           |
          +-----------------------------+
          |  Appointment Scheduling     |
          | - Patient Appointments      |
          | - Doctor Schedules          |
          | - Availability              |
          +-----------------------------+
          |  Billing and Claims         |
          | - Patient Billing           |
          | - Insurance Claims          |
          | - Payments                  |
          +-----------------------------+
          |  Medical Research           |
          | - Clinical Trial Data       |
          | - Research Studies          |
          | - Statistical Analysis      |
          +-----------------------------+


Retail
--------
          +-----------------------------+
          |            Retail           |
          +-----------------------------+
          |  Inventory Management       |
          | - Stock Levels              |
          | - Product Information       |
          | - Supplier Details          |
          +-----------------------------+
          |  Sales and Transactions     |
          | - Sales Transactions        |
          | - Payments                  |
          | - Returns                   |
          +-----------------------------+
          |  Customer Relationship      |
          |  Management (CRM)           |
          | - Customer Information      |
          | - Purchase Histories        |
          | - Preferences               |
          +-----------------------------+
          |  Supply Chain Management    |
          | - Orders                    |
          | - Shipments                 |
          | - Logistics                 |
          +-----------------------------+



Education
-----------

          +-----------------------------+
          |           Education         |
          +-----------------------------+
          |  Student Information Systems|
          |  (SIS)                      |
          | - Student Records           |
          | - Enrollments               |
          | - Academic Histories        |
          +-----------------------------+
          |  Course Management          |
          | - Course Schedules          |
          | - Curricula                 |
          | - Faculty Assignments       |
          +-----------------------------+
          |  Library Management         |
          | - Book Inventories          |
          | - Borrow/Return Transactions|
          | - Member Details            |
          +-----------------------------+
          |  E-Learning Platforms       |
          | - Online Course Content     |
          | - Student Progress          |
          | - Assessment Results        |
          +-----------------------------+




Telecommunications
---------------------        
        +-----------------------------+
        |       Telecommunications    |
        +-----------------------------+
        |  Customer Data Management   |
        | - Accounts                  |
        | - Subscription Details      |
        | - Billing Information       |
        +-----------------------------+
        |  Network Management         |
        | - Network Performance       |
        | - Usage Data                |
        | - Maintenance Schedules     |
        +-----------------------------+
        |  Service Provisioning       |
        | - Service Activation        |
        | - Upgrades                  |
        | - Troubleshooting           |
        +-----------------------------+
        |  Billing Systems            |
        | - Generating Invoices       |
        | - Processing Payments       |
        | - Handling Disputes         |
        +-----------------------------+


Government
-------------

        +-----------------------------+
        |          Government         |
        +-----------------------------+
        |  Public Records Management  |
        | - Birth Certificates        |
        | - Property Deeds            |
        | - Licenses                  |
        +-----------------------------+
        |  Taxation Systems           |
        | - Taxpayer Information      |
        | - Tax Returns               |
        | - Payments                  |
        +-----------------------------+
        |  Law Enforcement            |
        | - Criminal Records          |
        | - Incident Reports          |
        | - Investigations            |
        +-----------------------------+
        |  E-Government Services      |
        | - Online Applications       |
        | - Renewals                  |
        | - Information Access        |
        +-----------------------------+



E-Commerce Platforms
-----------------------
        +-----------------------------+
        |        E-Commerce           |
        +-----------------------------+
        |  Product Catalog Management |
        | - Product Information       |
        | - Prices                    |
        | - Inventory Levels          |
        +-----------------------------+
        |  Customer Information       |
        | - Customer Profiles         |
        | - Order Histories           |
        | - Preferences               |
        +-----------------------------+
        |  Order Processing           |
        | - Order Placements          |
        | - Payments                  |
        | - Shipping Details          |
        | - Tracking                  |
        +-----------------------------+
        |  Recommendation Systems     |
        | - Analyzing Data            |
        | - Personalized Suggestions  |
        +-----------------------------+



Social Media Platforms
------------------------
          +-----------------------------+
          |       Social Media          |
          +-----------------------------+
          |  User Profile Management    |
          | - Personal Information      |
          | - Friends                   |
          | - Activity Logs             |
          +-----------------------------+
          |  Content Management         |
          | - Posts                     |
          | - Comments                  |
          | - Likes                     |
          | - Shares                    |
          +-----------------------------+
          |  Message and Chat           |
          | - Real-Time Messaging       |
          | - Chat Histories            |
          +-----------------------------+
          |  Analytics and Insights     |
          | - User Behavior Analysis    |
          | - Engagement Metrics        |
          +-----------------------------+




Content Management Systems (CMS)
--------------------------------------

          +-----------------------------+
          |         CMS                 |
          +-----------------------------+
          |  Content Storage            |
          | - Articles                  |
          | - Blog Posts                |
          | - Media Files               |
          +-----------------------------+
          |  User Management            |
          | - User Roles                |
          | - Permissions               |
          | - Access Controls           |
          +-----------------------------+
          |  SEO and Metadata           |
          | - Metadata Storage          |
          | - SEO Optimization          |
          | - Content Categorization    |
          +-----------------------------+
          |  Version Control            |
          | - Track Changes             |
          | - Version Histories         |
          +-----------------------------+
          

            
            Travel and Booking Systems
            ---------------------------
            
            Job Portals
            -----------------------
            
            Online Learning Platforms
            ------------------------
            
            etc
            



=======================================================
Types of DBMS Software
=======================================================

      Hierarchical DBMS: 
      ----------------------
            Tree-like structure, used in directory services and telecommunications.

                       Root
                        |
                       Node
                      / |  \
                Child Child Child



      Network DBMS:
      ----------------------
            Graph structure, used in complex relationship management.

                      Node
                     /    \
                 Child  Child
                  /  \    /
              Child Child



      Relational DBMS (RDBMS): 
      ----------------------
            Table-based, widely used in various applications.

            +------------+     +-------------+
            |  Table A   |     |   Table B   |
            +------------+     +-------------+
            |  Column 1  | <-- |  Column 1   |
            |  Column 2  |     |  Column 2   |
            +------------+     +-------------+



      Object-Oriented DBMS (OODBMS): 
      ----------------------
            Object-based, used in complex simulations and multimedia.

                        +-----------------------+
                        |      Object A         |
                        |  +-----------------+  |
                        |  | Attributes      |  |
                        |  | Methods         |  |
                        |  +-----------------+  |
                        +-----------------------+
                                   |
                                   v
                        +-----------------------+
                        |      Object B         |
                        |  +-----------------+  |
                        |  | Attributes      |  |
                        |  | Methods         |  |
                        |  +-----------------+  |
                        +-----------------------+



      Document-Oriented DBMS:
      ----------------------
            Document-based, used in content management and real-time analytics.

                        +---------------------------+
                        |     Document              |
                        |  {                        |
                        |    "field1": "value",     |
                        |    "field2": {            |
                        |       "subfield": "value" |
                        |    }                      |
                        |  }                        |
                        +---------------------------+


      Columnar DBMS: 
      ----------------------
            Column-based, used in big data analytics and data warehousing.


                        +-------------+    +-------------+
                        | Column 1    |    | Column 2    |
                        +-------------+    +-------------+
                        | Row 1 Value |    | Row 1 Value |
                        | Row 2 Value |    | Row 2 Value |
                        +-------------+    +-------------+



      Key-Value Store: 
      ----------------------
            Key-value pairs, used in caching and session management.

                              +---------+   +---------+
                              |  Key    |   |  Value  |
                              +---------+   +---------+
                              | "key1"  |   | "value1"|
                              | "key2"  |   | "value2"|
                              +---------+   +---------+



      Graph DBMS:
      ----------------------
            Node-edge properties, used in social networks and fraud detection.
      
                        (Node) -[Edge]-> (Node)





=======================================================
Types of DBMS Software
=======================================================

Type	                  DBMS Software
---------------------------------------------
Hierarchical	      IBM IMS, Windows Registry
Network	            Integrated Data Store (IDS), Raima Database Manager
Relational (RDBMS)	MySQL, Oracle Database, Microsoft SQL Server, PostgreSQL
Object-Oriented	      ObjectDB, db4o, Versant Object Database
Document-Oriented	      MongoDB, CouchDB
Columnar	            Apache Cassandra, HBase, Amazon Redshift
Key-Value Store	      Redis, Amazon DynamoDB, Riak
Graph	                  Neo4j, Amazon Neptune, OrientDB


Use Cases
-------------
Hierarchical DBMS: Transaction processing in enterprise environments.

Network DBMS: Applications requiring complex relationships, such as transport networks.

Relational DBMS: Web applications, enterprise resource planning (ERP), 
                  customer relationship management (CRM).

Object-Oriented DBMS: CAD/CAM systems, multimedia applications, complex simulations.

Document-Oriented DBMS: Content management systems, real-time analytics, blogging platforms.

Columnar DBMS: Big data analytics, data warehousing.

Key-Value Store: Caching, session management, high-speed read/write operations.

Graph DBMS: Social networks, fraud detection, applications with complex relationships.





=======================================================
Functions of DBMS
=======================================================

A Database Management System (DBMS) serves as the intermediary
between the user and the database. 

It provides various functions that facilitate the efficient, 
secure, and reliable management of data. Here are the key functions of a DBMS:


                  +---------------------------+
                  |        User Interface     |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Query Processing       |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Data Storage Management|
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Data Manipulation      |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Transaction Management |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Concurrency Control    |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Backup and Recovery    |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Data Integrity         |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Security Management    |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Data Independence      |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Data Dictionary        |
                  +---------------------------+
                              |
                              v
                  +---------------------------+
                  |    Performance Management |
                  +---------------------------+
                  




1. Data Storage Management
--------------------------------
      Function: Manages the storage of data, 
                metadata, and indexes in the database.
      
      Details: Ensures data is stored efficiently and 
               optimizes disk space usage. 
                Handles the physical storage of data on storage devices.


2. Data Retrieval and Query Processing
--------------------------------
      Function: Allows users to retrieve and
                manipulate data through queries.
      
      Details: Provides a query language (such as SQL) 
               for data retrieval. 
               Optimizes query execution for performance.


3. Data Update and Manipulation
--------------------------------
      Function: Enables data insertion, updating, and deletion.
      
      Details: Ensures data integrity and consistency during updates. 
               Supports operations like INSERT, UPDATE, DELETE, and SELECT.


4. Transaction Management
--------------------------------
      Function: Manages transactions to ensure data 
                consistency and integrity.
      
      Details: Supports ACID properties (Atomicity, Consistency, Isolation, Durability). 
               Handles multiple transactions concurrently without compromising data integrity.


5. Concurrency Control
--------------------------------
      Function: Manages concurrent access to the database.

      Details: Ensures that multiple users 
               can access the database simultaneously without conflicts. 
               Prevents issues such as deadlock and data inconsistency.


6. Backup and Recovery
--------------------------------
      Function: Provides mechanisms for data backup and recovery.
      
      Details: Ensures data can be restored in case of 
               hardware failure, software errors, or other issues. 
               Supports regular backups and provides 
              tools for data recovery.



7. Data Integrity Management
--------------------------------
      Function: Ensures the accuracy and consistency of data.
      
      Details: Implements constraints such as 
            primary keys, foreign keys, unique constraints, and check constraints. 
            Validates data input to maintain data integrity.


8. Security Management
--------------------------------
      Function: Protects data from unauthorized access and breaches.
      
      Details: Implements user authentication, access 
            controls, and encryption.
            Provides audit trails and 
            logs to monitor data access and changes.


9. Data Independence
--------------------------------
      Function: Provides data abstraction and independence.
      
      Details: Ensures that changes in the database 
            schema do not affect the application programs.
            Supports logical and physical data independence.


10. Data Dictionary Management
--------------------------------
      Function: Manages metadata and schema definitions.
      
      Details: Stores information about the 
            database structure, such as tables, columns, 
            data types, and relationships. 
            Facilitates database design and maintenance.


11. Performance Management
--------------------------------
      Function: Optimizes database performance.
      
      Details: Monitors and tunes database performance. 
            Uses indexing, query optimization, and caching to enhance performance.



12. User Interface Management
--------------------------------
      Function: Provides interfaces for users to interact with the database.
      
      Details: Offers graphical user interfaces (GUIs) and 
            command-line interfaces (CLIs). 
            Facilitates ease of use and accessibility for various types of users.











=======================================================
 Database Users
=======================================================

      A database user is anyone who interacts with the database system. 
      Database users can have different roles and levels of access depending 
      on their responsibilities and the needs of the organization.
      
      They use the database to perform various tasks, such as querying data,
      updating records, and managing database operations.



Types of Database Users:
--------------------------
End Users: These are the individuals who use the database applications 
for retrieving, entering, and updating data.
They are not concerned with the technical aspects of database management.


      Application Programmers: 
      ------------------------
            These users write application programs that interact with the database. 
            They use programming languages and APIs to develop software
            that makes use of the database.
      
      
      Database Administrators (DBAs): 
      ------------------------------
            These are the technical experts who manage the database system, 
            ensuring its performance, security, and availability.
      
      
      System Analysts and Designers:
      -------------------------------
            These users are responsible for designing the database structure
            and ensuring that it meets the requirements of the business.






=======================================================
Database Administrator
=======================================================

A Database Administrator (DBA) is a specialized role within the 
database environment responsible for managing and maintaining the 
database system. 
DBAs ensure the database is available, secure, and running efficiently.



Roles and Responsibilities of a DBA:
------------------------------------

      Installation and Configuration: 
      -----------------------------
      Setting up the database management system (DBMS) and
      configuring it to suit the needs of the organization.


      Backup and Recovery: 
      -----------------------------
      Implementing and managing backup procedures
      to ensure data can be restored in case of a failure.
      
      
      Performance Monitoring and Tuning: Continuously 
      monitoring the performance of the database and tuning it for optimal efficiency.


      Security Management: 
      -----------------------------
      Ensuring that the database is secure from 
      unauthorized access and potential threats.


      User Management: 
      -----------------------------
      Managing user accounts, roles, and 
      permissions to control access to the database.


      Data Integrity and Consistency: 
      -----------------------------
      Ensuring that data remains accurate, consistent,
      and reliable throughout its lifecycle.






=======================================================
Advantages of Databases
=======================================================

Databases provide a systematic way to manage and
retrieve data, offering several advantages over traditional file systems.
      
      Key Advantages:
      --------------------

            Data Redundancy and Consistency: 
            ---------------------------------
            Databases reduce data redundancy by storing data 
            in a centralized location, ensuring consistency across the organization.
            
            
            Data Integrity: 
            --------------------
            Databases enforce data integrity constraints to 
            ensure that the data remains accurate and valid.
            
            
            Data Security: 
            --------------------
            Advanced security features help protect sensitive
            data from unauthorized access and breaches.
            
            
            Data Sharing: 
            --------------------
            Multiple users and applications can share data 
            simultaneously, improving collaboration and efficiency.
            
            
            Data Independence: 
            --------------------
            The separation of data and application logic allows
            changes to be made to the database without affecting the applications that use it.
            
            
            Efficient Data Access: 
            --------------------
            Databases use structured query languages (SQL) to 
            retrieve and manipulate data quickly and efficiently.
            
            
            Backup and Recovery:
            --------------------
            Built-in mechanisms for backup and
            recovery ensure data can be restored in case of loss or corruption.
      








=======================================================
Data Models
=======================================================

A data model is a conceptual framework for organizing and 
structuring data within a database.
It defines how data is connected, stored, and accessed, 
providing a blueprint for database design and implementation.


      Types of Data Models:
      ------------------------
            Hierarchical Data Model: 
            --------------------
            Organizes data in a tree-like structure with parent-child relationships. 
            It is simple but inflexible, as each child can have only one parent.

            Company
              |
              +--- Department 1
              |        |
              |        +--- Employee 1
              |        |
              |        +--- Employee 2
              |
              +--- Department 2
              |        |
              |        +--- Employee 3
              |        |
              |        +--- Employee 4
              |
              +--- Department 3
                       |
                       +--- Employee 5
                       |
                       +--- Employee 6





            
            Network Data Model: 
            --------------------
            Allows more complex relationships by organizing data in a 
            graph structure, where entities can have multiple parent and child nodes.

            
                      Project A
                      /   |    \
                     /    |     \
                    /     |      \
            Employee 1 - Task 1 - Employee 2
                |         |         |
                |         |         |
            Task 2 - Employee 3 - Task 3



            
            Relational Data Model: 
            -----------------------
            Represents data in tables (relations) with rows and columns. 
            It uses keys to establish relationships between tables and is
            the most widely used model due to its simplicity and flexibility.
            

            [Departments]
            +--------------+----------------+
            | DepartmentID | DepartmentName |
            +--------------+----------------+
            | 101          | HR             |
            | 102          | Finance        |
            | 103          | IT             |
            +--------------+----------------+
            
                      ^
                      |
                      |  (references)
                      |
            
            [Employees]
            +------------+-------------+--------------+
            | EmployeeID | Name        | DepartmentID |
            +------------+-------------+--------------+
            | 1          | John Smith  | 101          |
            | 2          | Jane Doe    | 102          |
            | 3          | Sam Brown   | 101          |
            | 4          | Lucy Black  | 103          |
            +------------+-------------+--------------+
            
                      ^
                      |
                      |  (references)
                      |
            
            [Projects]
            +-----------+-------------+------------+
            | ProjectID | ProjectName | EmployeeID |
            +-----------+-------------+------------+
            | 201       | Project A   | 1          |
            | 202       | Project B   | 2          |
            | 203       | Project C   | 3          |
            | 204       | Project D   | 4          |
            +-----------+-------------+------------+
            



            
            Object-Oriented Data Model:
            ----------------------------
            Integrates object-oriented programming principles with 
            database systems, allowing complex data types and relationships.

            +-------------------+
            |      Employee     |
            +-------------------+
            | - EmployeeID      |
            | - Name            |
            | - Salary          |
            +-------------------+
            | + getDetails()    |
            | + updateSalary()  |
            +-------------------+
            
                       ^
                       |
            (Inherits) |
                       v
            
            +-------------------+
            |      Manager      |
            +-------------------+
            | - EmployeeID      |
            | - Name            |
            | - Salary          |
            | - ManagedDepartment |
            +-------------------+
            | + getDetails()    |
            | + updateSalary()  |
            | + getManagedDepartment() |
            +-------------------+
            
            +-------------------+
            |    Department     |
            +-------------------+
            | - DepartmentID    |
            | - DepartmentName  |
            +-------------------+
            | + getDepartmentDetails() |
            | + addEmployee()   |
            +-------------------+
            
            +-------------------+
            |      Project      |
            +-------------------+
            | - ProjectID       |
            | - ProjectName     |
            | - Employee        |
            +-------------------+
            | + getProjectDetails() |
            | + assignEmployee() |
            +-------------------+

            
            
            Entity-Relationship Model (ER Model):
            --------------------------------------
            A high-level graphical representation of data entities, attributes, 
            and relationships, used primarily in database design to map out 
            the logical structure of the database.

      
            +-------------+        +-------------+
            |  Employee   |        | Department  |
            +-------------+        +-------------+
            | EmployeeID  |<-----  | DepartmentID|
            | Name        |        | DepartmentName|
            | Salary      |        +-------------+
            +-------------+              ^
                  |                      |
                  | Works_In             | Manages
                  |                      |
                  v                      |
            +-------------+              |
            | Assignment  |              |
            +-------------+              |
            | AssignmentID|              |
            | Role        |              |
            +-------------+              |
                  |                      |
                  | Assigned_To          |
                  |                      |
                  v                      |
            +-------------+              |
            |   Project   |<-------------+
            +-------------+
            | ProjectID   |
            | ProjectName |
            +-------------+
                  
            
            
            Document Data Model: 
            --------------------
            Stores data in document formats (e.g., JSON, XML), allowing 
            for flexible and hierarchical data representation, commonly used in NoSQL databases.

            
            +-----------------------------------------+
            |               Employee                  |
            +-----------------------------------------+
            | EmployeeID: 1                           |
            | Name: John Smith                        |
            | Salary: 50000                           |
            | Department: {                           |
            |   DepartmentID: 101,                    |
            |   DepartmentName: HR                    |
            | }                                       |
            | Projects: [                             |
            |   { ProjectID: 201, ProjectName: "Project A" }, |
            |   { ProjectID: 202, ProjectName: "Project B" }  |
            | ]                                       |
            +-----------------------------------------+
            
            +-----------------------------------------+
            |               Department                |
            +-----------------------------------------+
            | DepartmentID: 101                       |
            | DepartmentName: HR                      |
            | Employees: [                            |
            |   { EmployeeID: 1, Name: "John Smith" },|
            |   { EmployeeID: 3, Name: "Sam Brown" }  |
            | ]                                       |
            +-----------------------------------------+
            
            +-----------------------------------------+
            |                Project                  |
            +-----------------------------------------+
            | ProjectID: 201                          |
            | ProjectName: "Project A"                |
            | Employees: [                            |
            |   { EmployeeID: 1, Name: "John Smith" } |
            | ]                                       |
            +-----------------------------------------+





=======================================================
Schemas and Instances 
=======================================================

Schemas
---------
      A schema is the structure that defines the organization
      of data within a database. 
      
      It describes how data is stored, including the tables, fields, 
      relationships, indexes, and constraints. 
      Schemas are essentially blueprints for the database.



      Types of Schemas:
      ----------------
            Physical Schema: 
            ----------------
            Describes how data is stored at the physical level, including files, 
            indexes, and physical storage structures.
            
            Logical Schema: 
            ----------------
            Describes the logical structure of the database, including tables,
            columns, data types, and relationships.
            
           : 
            ----------------
            Describes how specific users view the data, often including
            subsets of data from the logical schema for security or convenience.



Instance
---------
      An instance is the actual data stored in a 
      database at a particular moment in time. 
      While the schema defines the structure, the instance
      is the collection of data that conforms to that structure at any given point.


      
      .-------------------------------------------------------------.
      |                      Three-Schema Architecture              |
      |-------------------------------------------------------------|
      |                       +----------------+                    |
      |                       |  View Schema   |                    |
      |                       +----------------+                    |
      |                       | - Customized   |                    |
      |                       |   views of     |                    |
      |                       |   data         |                    |
      |                       +----------------+                    |
      |                                 |                           |
      |                                 | Logical Schema            |
      |                                 |                           |
      |                       +------------------------+            |
      |                       |  Logical Schema        |            |
      |                       +------------------------+            |
      |                       | - Entities and         |            |
      |                       |   relationships       |            |
      |                       | - Data types          |            |
      |                       +------------------------+            |
      |                                 |                           |
      |                                 | Physical Schema           |
      |                                 |                           |
      |                       +------------------------+            |
      |                       |  Physical Schema       |            |
      |                       +------------------------+            |
      |                       | - Storage structures   |            |
      |                       | - File organization   |            |
      |                       | - Indexing techniques |            |
      |                       +------------------------+            |
      '-------------------------------------------------------------'
      



=======================================================
Three-Schema
=======================================================

The three-schema architecture is a framework for database
systems that separates the database system into three levels:

      Internal Schema (Physical Level):
      ------------------------------------
            Describes how data is physically stored and accessed.
            Includes storage structures, file organizations, and indexing techniques.



      Conceptual Schema (Logical Level):
      ------------------------------------
            Describes the structure of the entire database for a community of users.
            Includes entities, relationships, data types, constraints, and user operations.


      External Schema (View Level):
      ---------------------------
            Describes various user views of the database.
            Includes a subset of the database tailored to specific user needs or applications.

      
      .-------------------------------------------------------------.
      |                       Types of Schemas                       |
      |-------------------------------------------------------------|
      |                                                             |
      | +-----------------+   +-----------------+   +--------------+|
      | | Physical Schema |   | Logical Schema  |   | View Schema  ||
      | +-----------------+   +-----------------+   +--------------+|
      | | - Storage       |   | - Entities      |   | - Patient    ||
      | |   structures    |   |   and           |   |   records    ||
      | | - File          |   |   relationships |   | - Doctor     ||
      | |   organization  |   | - Attributes    |   |   schedules  ||
      | | - Indexing      |   | - Constraints   |   | - Appointment||
      | |   techniques    |   | - Data types    |   |   calendar   ||
      | +-----------------+   +-----------------+   +--------------+|
      | | Example:        |   | Example:        |   | Example:     ||
      | | - Physical      |   | - Logical       |   | - View of    ||
      | |   storage of    |   |   definition of |   |   patient    ||
      | |   patient data  |   |   entities and  |   |   appointments||
      | |   files         |   |   relationships |   |   for today   ||
      | |                 |   |   (e.g.,        |   |              ||
      | |                 |   |   Patient,      |   |              ||
      | |                 |   |   Doctor,       |   |              ||
      | |                 |   |   Appointment)  |   |              ||
      '-------------------------------------------------------------'


      https://www.javatpoint.com/database-schema

      https://www.geeksforgeeks.org/database-schemas/






=======================================================
Architecture and Data Independence
=======================================================

Data independence refers to the ability to change the 
schema at one level of the database system without 
affecting the schema at the next higher level. 

      There are two types:
      ---------------------
            Logical Data Independence:
            --------------------------
            The capacity to change the conceptual schema without 
            affecting the external schemas or application programs.
            For example, adding a new field to a table should not affect user views.
            
            
            Physical Data Independence:
            --------------------------
            The capacity to change the internal schema without
            affecting the conceptual schema.
            For example, changing the way data is stored (e.g., using a 
            different indexing method) should not affect the logical structure.


      .-------------------------------------------------------------.
      |                    Data Independence                         |
      |-------------------------------------------------------------|
      | +-----------------------------+  +-------------------------+ |
      | |  Logical Data Independence  |  |  Physical Data Independence| |
      | +-----------------------------+  +-------------------------+ |
      | | - Changes to the logical    |  | - Changes to the physical| |
      | |   schema do not affect      |  |   schema do not affect   | |
      | |   external schemas or       |  |   the logical schema     | |
      | |   application programs.     |  |   or application programs| |
      | +-----------------------------+  +-------------------------+ |
      | | Example:                    |  | Example:                 | |
      | | - Adding a new attribute    |  | - Changing storage      | |
      | |   to a table does not       |  |   structures (e.g.,      | |
      | |   require changes to views  |  |   moving to a different  | |
      | |   or queries using that     |  |   database system) does  | |
      | |   table.                    |  |   not require updating   | |
      | |                             |  |   application logic that | |
      | |                             |  |   relies on the data.    | |
      | +-----------------------------+  +-------------------------+ |
      '-------------------------------------------------------------'







=======================================================
Database Languages and Interfaces
=======================================================


Database Languages:
---------------------
      Database Languages and Interfaces refer to the tools and methods 
      used to interact with databases, manage data, and perform operations
      within a database management system (DBMS). 
      
      They play crucial roles in defining, manipulating, querying, 
      and controlling access to data stored in databases. 


      Here's a breakdown of each:
      ------------------------------- DDL , DML, DCL, TCL
           
            Data Definition Language (DDL):
            --------------------------------
                  Purpose: Used to define and manage the 
                            structure of database objects (e.g., tables, indexes).
                  Commands: CREATE, ALTER, DROP.
                  
                  Example: CREATE TABLE, ALTER TABLE ADD COLUMN, DROP INDEX.
            
            
            
            Data Manipulation Language (DML):
            --------------------------------
                  Purpose: Used to manipulate data within database objects.
                  
                  Commands: SELECT, INSERT, UPDATE, DELETE.
            
                  Example: SELECT * FROM, INSERT INTO, UPDATE SET, DELETE FROM.
            
      
            
            Data Control Language (DCL):
            --------------------------------
                  Purpose: Used to manage access rights and permissions
                           within the database.
                  
                  Commands: GRANT, REVOKE.
                  
                  Example: GRANT SELECT ON, REVOKE INSERT ON.
            
            
            Transaction Control Language (TCL):
            --------------------------------
                  Purpose: Used to manage transactions within the database.
                  
                  Commands: COMMIT, ROLLBACK, SAVEPOINT.
                  
                  Example: BEGIN TRANSACTION, COMMIT, ROLLBACK.
            



Database Interfaces:
---------------------
      Interfaces refer to the tools and methods used to 
      interact with databases, manage data, and perform operations 
      within a database management system (DBMS). 
      
      They play crucial roles in defining, manipulating, querying,
      and controlling access to data stored in databases. 
      
      Here's a breakdown of each:
      ------------------------------
      
            Command-Line Interface (CLI):
            ---------------------------------
                  Definition: Text-based interface for interacting with databases using commands.
            
                  Usage: Suitable for administrators and developers familiar with SQL syntax.
            
            
            Graphical User Interface (GUI):
            ---------------------------------
                  Definition: Visual interface for database management tasks.
                  
                  Features: Query building, table design, data visualization.
                  
                  Usage: User-friendly for non-technical users and quick data manipulation.
            
            
            Application Programming Interface (API):
            --------------------------------------------
                  Definition: Allows applications to communicate and 
                              interact with databases programmatically.
                  
                  Features: Provides methods and libraries for database access.
                  
                  Usage: Integration into applications for data storage and retrieval.
            
            
            Web-Based Interface:
            ----------------------
                  Definition: Interface accessed through web browsers.
                  
                  Features: Provides database functionality over the internet.
                  
                  Usage: Remote access, collaborative work, and cross-platform compatibility.
            
            
            Embedded SQL:
            ----------------------
                  Definition: SQL statements embedded within programming languages.
                  
                  Usage: Integrates SQL queries directly into application code (e.g., Java, C++).
                  
            


=======================================================
Database System Environment
=======================================================
      The database system environment refers to the
      collection of components and factors that surround 
      and support the operation of a database management system (DBMS). 
      
      These components interact to store, manage, and 
      access data efficiently. 
      
      Understanding the database system environment 
      involves considering the following key elements:
      
      
      
      Database System Environment Components
      --------------------------------------------
            Hardware:
            ---------------
                  Includes servers, storage devices, network equipment.
                  Provides physical infrastructure for storing and processing data.
            
            
            Software:
            ---------------
                  Operating System: Manages hardware resources and 
                                    provides basic services for other software.
                  
                  DBMS: Database Management System software that
                        facilitates creation, organization, and manipulation 
                        of databases.
                  
                  Applications: Software that interacts with the
                                DBMS to manage and use data (e.g., ERP systems, CRM systems).
            
            
            Data:
            -----
                  Structured information organized according to 
                  the schema defined by the DBMS.
                  
                  Stored in tables (for relational databases) or
                  other formats depending on the DBMS.
            
            
            Users:
            ---------------
                  Individuals or entities who interact 
                  with the database system.
                  
                  Includes administrators, developers, and 
                  end-users who query and update data.
            
            Procedures:
            ---------------
                  Guidelines and protocols for managing
                  and operating the database system.
                  
                  Includes backup procedures, security 
                  policies, data maintenance routines.
      

      
      .--------------------------------------------------------------.
      |                      Database System Environment             |
      |--------------------------------------------------------------|
      |                    +-------------------------+               |
      |                    |       Hardware          |               |
      |                    +-------------------------+               |
      |                    | - Servers               |               |
      |                    | - Storage devices       |               |
      |                    | - Network equipment     |               |
      |                    +-------------------------+               |
      |                                  |                           |
      |                                  |                           |
      |                    +-------------------------+               |
      |                    |       Software          |               |
      |                    +-------------------------+               |
      |                    | - Operating System      |               |
      |                    | - DBMS                  |               |
      |                    | - Applications         ||               |
      |                    +-------------------------+               |
      |                                  |                           |
      |                                  |                           |
      |                    +-------------------------+               |
      |                    |         Data            |               |
      |                    +-------------------------+               |
      |                    | - Structured Information|               |
      |                    | - Stored in Tables      |               |
      |                    |   or other formats     ||               |
      |                    +-------------------------+               |
      |                                  |                           |
      |                                  |                           |
      |                    +-------------------------+               |
      |                    |         Users           |               |
      |                    +-------------------------+               |
      |                    | - Administrators       |               |
      |                    | - Developers           |               |
      |                    | - End-users            |               |
      |                    +-------------------------+               |
      |                                  |                           |
      |                                  |                           |
      |                    +-------------------------+               |
      |                    |       Procedures        |               |
      |                    +-------------------------+               |
      |                    | - Backup procedures    |               |
      |                    | - Security policies    |               |
      |                    | - Data maintenance     |               |
      |                    |   routines             |               |
      |                    +-------------------------+               |
      '--------------------------------------------------------------'
      





=======================================================
Centralized and Client/Server Architectures for DBMSs
=======================================================

Centralized Architecture:
------------------------------
            In a centralized architecture for DBMSs, all the 
            components of the database management system reside 
            on a single server or machine.


            Characteristics:
            -----------------
            Single Point of Control: All database operations (data storage, retrieval, 
            manipulation) are handled by the central server.
            
            Limited Scalability: Scaling resources can be challenging as all
            operations rely on a single server's capacity.
            
            Simplicity: Management and administration are straight
            forward since everything is centralized.
      
      
            Example Scenario: A small business or a department within an
            organization may use a single computer acting as both
            the database server and client.

      .-------------------------------------------------------------.
      |                     Centralized Architecture                |
      |-------------------------------------------------------------|
      |                     +-------------------------------------+ |
      |                     |              Server                 | |
      |                     +-------------------------------------+ |
      |                     | - DBMS                               | |
      |                     | - Data Storage                       | |
      |                     | - Processing                         | |
      |                     +-------------------------------------+ |
      |                                                             |
      |                     +-------------------------------------+ |
      |                     |              Clients                | |
      |                     +-------------------------------------+ |
      |                     | - User Interface                     | |
      |                     | - Requests                           | |
      |                     | - Display Results                    | |
      |                     +-------------------------------------+ |
      '-------------------------------------------------------------'




Client/Server Architecture:
-------------------------------

In a client/server architecture, the DBMS is split 
into two parts: a server that manages database
operations and storage, and multiple clients that
access and interact with the server.


      Characteristics:
      ------------------------
      Division of Responsibilities: Server manages data storage,
      retrieval,and processing, while clients initiate 
      requests and display results.
      
      Scalability: Easier to scale resources by adding 
      more servers or clients as needed.
      
      Flexibility: Allows distributed access to data, 
      facilitating concurrent user interactions.


      Example Scenario: Large enterprises use client/server architecture 
      for their ERP systems, where multiple departments (clients) access and 
      update centralized data managed by a dedicated database server.



      .-------------------------------------------------------------.
      |                    Client/Server Architecture              |
      |-------------------------------------------------------------|
      |                    +-------------------------------------+ |
      |                    |              Database Server        | |
      |                    +-------------------------------------+ |
      |                    | - DBMS                               | |
      |                    | - Data Storage                       | |
      |                    | - Query Processing                   | |
      |                    +-------------------------------------+ |
      |                                                              |
      |                    +---------------------+  +----------------+ |
      |                    |        Client       |  |      Client    | |
      |                    +---------------------+  +----------------+ |
      |                    | - User Interface    |  | - User Interface| |
      |                    | - Sends Requests    |  | - Receives Data | |
      |                    | - Displays Results |  |   from Server   | |
      |                    +---------------------+  +----------------+ |
      '-------------------------------------------------------------'









=======================================================
Classification of Database Management Systems
=======================================================

      
      .------------------------------------------------------------.
      |                 Classification of DBMS                      |
      |------------------------------------------------------------|
      |   +-----------------------------------------------+        |
      |   |          Based on Data Model                   |        |
      |   +-----------------------------------------------+        |
      |   | - Relational DBMS                             |        |
      |   | - NoSQL DBMS                                  |        |
      |   | - Object-Oriented DBMS                        |        |
      |   +-----------------------------------------------+        |
      |                                                              |
      |   +-----------------------------------------------+        |
      |   |          Based on Architecture                 |        |
      |   +-----------------------------------------------+        |
      |   | - Centralized DBMS                            |        |
      |   | - Distributed DBMS                            |        |
      |   | - Client/Server DBMS                          |        |
      |   +-----------------------------------------------+        |
      |                                                              |
      |   +-----------------------------------------------+        |
      |   |          Based on Usage Scenario               |        |
      |   +-----------------------------------------------+        |
      |   | - Operational DBMS (OLTP)                      |        |
      |   | - Analytical DBMS (OLAP)                       |        |
      |   | - Data Warehouse DBMS                         |        |
      |   +-----------------------------------------------+        |
      |                                                              |
      |   +-----------------------------------------------+        |
      |   |          Other Classifications                 |        |
      |   +-----------------------------------------------+        |
      |   | - In-Memory DBMS                              |        |
      |   | - Graph DBMS                                  |        |
      |   | - Time-Series DBMS                            |        |
      |   +-----------------------------------------------+        |
      '------------------------------------------------------------'









=======================================================
INSTALLATION mysql 
=======================================================

                  
                  Installing MySQL with XAMPP:
                  ********************************


      Download XAMPP:
      --------------------
            Go to the Apache Friends website and 
            download the XAMPP installer for your
            operating system (Windows, macOS, Linux).
            
            https://www.apachefriends.org/
      
      
      Install XAMPP:
      --------------------
            Run the downloaded installer and follow the installation instructions.
            Choose components to install (ensure MySQL is selected).
            Complete the installation process.
      
      
      Start MySQL Server:
      --------------------
            Open XAMPP Control Panel after installation.
            Start the Apache and MySQL modules by clicking the "Start" button next to each.
      
      Access MySQL:
      --------------------
            Open your web browser and go to http://localhost/phpmyadmin/ to
            access phpMyAdmin, a web-based interface for MySQL.
            
            Alternatively, you can use MySQL command-line tools bundled with XAMPP.








                         Installing MySQL with MySQL Workbench:
                        ***************************************

      Download MySQL Installer:
      ---------------------------
            Go to the MySQL Community Downloads page.
            Download the MySQL Installer for your operating system.
      
            https://dev.mysql.com/downloads/installer/
      
      
      Run MySQL Installer:
      ---------------------------
            Launch the MySQL Installer and choose the "Custom" setup type.
            Select MySQL Server and MySQL Workbench components.
            Proceed with the installation, following the prompts.
      
      
      Configure MySQL Server:
      ---------------------------
            During installation, set up MySQL Server with desired 
            configuration options (e.g., port, root password).
            
      
      Start MySQL Server:
      ---------------------------
            After installation, launch MySQL Workbench.
            Connect to the MySQL Server using the credentials set during installation.
      
      







                  Installing MySQL with Docker:
                  ********************************

      Install Docker:
      ---------------------
            go to killerkoda, or github codespace
      
      
      Pull MySQL Image:
      --------------
            Open a terminal (Command Prompt or Terminal).
            Pull the MySQL Docker image from Docker Hub:
      
                  docker pull mysql
      
      
      Run MySQL Container:
      ---------------------
            Start a MySQL container with a 
            specified root password and port:
      
                  docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=your_password -p 3306:3306 -d mysql
      
                  Replace your_password with your desired root password.
      
                  $ docker run --name mero-sql -e MYSQL_ROOT_PASSWORD=1234 -p 3306:3306 -d mysql
      
      
      
      Access MySQL:
      ------------------
            Use MySQL client tools or MySQL Workbench to connect to
            MySQL running inside the Docker container.
            
            
            $ docker exec -ti mero-sql bash
            $ mysql -u root -p (1234)
      






Short Answer Questions, Analytical/Conceptual Questions ,Numerical/Practical Problems , case on 200 words and some
4 qestions on .........................




UNIT 1 . Introduction [5 Hrs.]
**************************************************************
Short Answer Questions
      What is the main advantage of using a DBMS compared to traditional flat-file storage systems?
      Define data abstraction in the context of DBMS.
      What are the three levels of data abstraction in a DBMS?
      Differentiate between a schema and an instance in a database.
      What is the role of a database manager?
      Explain the concept of data independence.
      How does an n-tier architecture enhance scalability in database applications?
      Name three common applications of DBMS in modern industries.
      What are the key characteristics of a DBMS?
      In a two-tier architecture, what are the two primary components?






Analytical/Conceptual Questions
      Discuss the evolution of database systems from flat files to modern DBMS.
      Explain how data independence helps improve database maintenance and usability.
      Compare and contrast one-tier, two-tier, and n-tier architectures with examples.
      Analyze the role of a schema in database design and how it differs from instances.
      Discuss how DBMS characteristics like minimal redundancy and data consistency improve organizational efficiency.
      Evaluate the pros and cons of n-tier architecture in database applications.
      How can data abstraction levels improve security and user interaction with databases?
      Explain the roles of casual users, application programmers, and database administrators (DBAs) in managing a DBMS.
      What are the challenges of transitioning from a traditional flat-file system to a modern DBMS?
      Discuss the advantages of using DBMS in real-world applications, such as healthcare or banking.




Numerical/Practical Problems
        A company is considering transitioning from a flat-file system to a DBMS. Currently, 
        it maintains 50,000 records, with each record taking 200 bytes. Calculate the space
        saved if the DBMS eliminates 10% of data redundancy.
        
        Design a simple schema for a student database, including tables for student
        information, courses, and enrollment. Define the relationships and primary keys.
        
        Draw an E-R diagram for a library management system and explain the schema.
        
        Given a two-tier architecture where 20 clients need to connect to a central database,
        explain the challenges in maintaining data consistency and propose solutions.
        

Case Study: Evolution of Database Applications

          In the 1990s, a small retail company managed its sales and inventory 
          using flat-file storage, leading to frequent data inconsistencies and redundancy. 
          When the company expanded, the flat-file system struggled to handle the increased 
          volume of data, causing delays and errors.
          
          To overcome these challenges, the company implemented a DBMS. The system 
          offered features like data abstraction, which allowed employees to focus on 
          querying data without worrying about its physical storage, and data independence,
          which simplified database maintenance during schema modifications.
          
          The company adopted an n-tier architecture where the database server handled
          all data processing, the application layer managed business logic, and a 
          user-friendly interface allowed employees to access relevant information. 
          This architecture ensured scalability, security, and efficient data management
          as the company grew.
          
          However, the transition was not without challenges. Training staff to 
          use the DBMS and restructuring workflows took significant time and resources. 
          Despite these hurdles, the DBMS significantly improved data accuracy and
          operational efficiency, helping the company scale its business.
          
          
          Questions 
              What were the main challenges faced by the company when using the flat-file system?
              
              How did the features of DBMS, such as data abstraction and data independence, benefit 
              the company?
              
              Why was an n-tier architecture chosen for the company’s database system?
              
              What potential challenges could arise when transitioning from a flat-file system
              to a DBMS?






                
                
                Problem Statement
                    A company has 50,000 records, with each record taking 200 bytes. If the DBMS
                    eliminates 10% of data redundancy, calculate the space saved.
                
                Solution
                    Calculate the Total Size of the Flat-File System:
                    The total size of all records in the flat-file system is:
                    
                          Total Size = Number of Records ×Size per Record
                          
                          Total Size=Number of Records×Size per Record
                          
                          Total Size=50,000×200=10,000,000bytes (or 10 MB)
                    
                    
                    
                    Calculate the Redundant Data:
                    The problem states that 10% of the data is redundant.
                    
                          Redundant Data=Total Size×10%
                          
                          Redundant Data=10,000,000×0.10=1,000,000bytes (or 1 MB)
                    
                    
                    Calculate the Space Saved:
                    If the DBMS eliminates 10% of data redundancy, the space saved is
                    equivalent to the redundant data:
                    
                          Space Saved=Redundant Data=1,000,000bytes (or 1 MB)
                    
                    The company will save 1,000,000 bytes (or 1 MB) of space
                    by transitioning to a DBMS and eliminating 10% of data redundancy.
                    
                












UNIT 2  Data Models [8 Hrs.]
**************************************************************

Short Answer Questions
      What is the difference between a conceptual, logical, and physical data model?
      Define an entity and an entity set with examples.
      What is the purpose of an E-R diagram in database design?
      Explain the difference between primary key and foreign key.
      What are attributes in the E-R model? Give an example.
      Define a weak entity and explain how it differs from a strong entity.
      What are relationship sets in the E-R model?
      What is the significance of a composite key?
      What is the role of a logical data model in database design?
      Name and explain two types of relationships in the E-R model.



Analytical/Conceptual Questions
        Compare and contrast the conceptual, logical, and physical data models. Why are all three important in database design?
        Discuss the characteristics of primary and candidate keys. Why is it important to select the correct primary key?
        Analyze the role of attributes in defining entities and how they impact database normalization.
        Explain how weak entities are represented in E-R diagrams and why they need a supporting relationship.
        Discuss the advantages of using E-R diagrams in the database design process.
        How do relationship cardinalities (one-to-one, one-to-many, many-to-many) affect database schema design?
        Why is it important to identify and remove redundant relationships in E-R diagrams?
        Analyze the implications of incorrectly defining relationships in an E-R model.
        How does the logical model serve as a bridge between the conceptual model and the physical implementation?
        Compare attributes, composite attributes, and multivalued attributes with examples.
        




Numerical/Practical Problems
        Design an E-R diagram for a hospital management system with entities 
        like Doctor, Patient, and Appointment. Define attributes, keys, and relationships.
        
        
        A university stores information about students, courses, and instructors.
        Create an E-R diagram, clearly defining the relationships and attributes for
        each entity.
        
        
        A company needs to store information about employees, departments, and 
        projects. Design a logical data model for this scenario.
        
        
        A database has the following entities: Books, Authors, and Publishers.
        Draw an E-R diagram showing relationships, including primary and foreign keys.
        



Case Study: Designing a Library Management System
          The city library wants to automate its management system. It needs to store data about:
          
              Books: Each book has an ISBN, title, author, and publication year.
              Members: Each member has a unique ID, name, address, and contact details.
              Loans: Each loan record tracks the book borrowed, member who borrowed it, and 
                    the loan date.
          
          
            The library also needs to manage the relationships between these entities. For
            instance, a member can borrow multiple books, and each book can be borrowed
            by different members at different times.
            
            Using an E-R model, the library plans to identify entities, attributes, and
            relationships, ensuring the system supports all operations like borrowing,
            returning, and tracking overdue books.
          
          
          Questions Based on the Case Study
                  Identify the entities and their attributes for the library management system.
                  
                  Define the relationships between the entities Books, Members, and Loans.
                  
                  Draw an E-R diagram for the library management system, including keys and 
                  relationships.
                  
                  How would you handle cases where a member returns a book late? Suggest
                  modifications to the E-R model to include penalties.
                  













UNIT 3  Normalization [7 Hrs.]
**************************************************************
Short Answer Questions
      What is normalization in the context of databases?
      Define functional dependency and give an example.
      What is the difference between trivial and non-trivial functional dependencies?
      Explain the concept of attribute closure.
      What are integrity constraints and why are they important in database design?
      Describe the characteristics of the first normal form (1NF).
      What is the second normal form (2NF), and how does it eliminate partial dependency?
      What is Boyce-Codd Normal Form (BCNF)? How is it different from 3NF?
      Explain the role of domain constraints in database integrity.
      What is the significance of normalizing a database to BCNF?




Analytical/Conceptual Questions
        Explain the importance of normalization in relational database design and its impact on data redundancy and consistency.
        Discuss the steps to achieve 1NF and provide an example with an unnormalized table and its conversion.
        How does 2NF address partial dependencies, and why is it important for data integrity?
        What are transitive dependencies, and how does 3NF resolve them?
        Explain why a database in BCNF has no redundancy and is free of certain types of anomalies.
        Analyze a sample table and perform normalization from 1NF to BCNF.
        How do functional dependencies help in the design of normalized database schemas?
        Compare 3NF with BCNF and explain why a relation in 3NF may still have redundancy.
        How can you determine if a database schema is in BCNF using functional dependencies?
        What are the potential drawbacks of over-normalization, and how can denormalization help in specific use cases?


        Let R = (A, B, C, D) and F be the set of functional dependencies for
        R given by {A→B, A→C, BC→D}. Prove A→D
              
        Let F = {AB → C, B → D, CD→E, CE→GH}. Give a derivation sequence on
        FD, {AB→G} using only Armstrong’s axioms. 

        Consider the relation schema R = {H, D, X, Y, Z} and the functional dependencies
        X→YZ, DX→W, Y→H

        Consider the relation schema R = {W, X, Y, Z} with set of functional dependencies
        F = {W → Z, YZ → X, WZ → Y}. Determine whether WZ, W or YZ are superkeys


        Perform normal form of the following student table , Normalize upto BCNF.

        +-----------+-------------+----------+-----------------+--------+-----------+
        | studentID | studentName | courseID | courseName      | credit | contact   |
        +-----------+-------------+----------+-----------------+--------+-----------+
        |       101 | Som         | IT220    | DBMS            |      3 | 9841,5573 |
        |       102 | Nita        | IT220    | DBMS            |      3 | 9850      |
        |       103 | Mona        | IT218    | DSA with Java   |      3 | 9871,2365 |
        |       104 | Jenny       | ECO201   | Micro Economics |      3 | 9985,4395 |
        +-----------+-------------+----------+-----------------+--------+-----------+
        
                                    Given Funtiona dependencies
                                    
                                    studentID -> studentName
                                    courseID -> courseName
                                    courseID -> credit












UNIT 4  Relational Language [10 Hrs.]
**************************************************************
Short Answer Questions:
          What is SQL and how does it differ from other programming languages?
          Define DDL (Data Definition Language) and provide examples of commands used in DDL.
          Explain the purpose of DML (Data Manipulation Language) with examples of its commands.
          What is DCL (Data Control Language) and why is it important in SQL?
          What are the common SQL data types? Provide examples of each.
          What is the purpose of using constraints in SQL? List some of the commonly used constraints.
          Describe the SELECT statement and its use in SQL.
          Explain the role of aggregate functions in SQL. Provide examples.
          What is a sub-query? Give an example of how it is used in SQL.
          What is the difference between INNER JOIN and LEFT JOIN in SQL?
          What is the GROUP BY clause used for in SQL?
          Describe the HAVING clause in SQL and its usage.
          What are SQL operators, and how are they used in SQL queries?
          Explain the significance of the LIKE pattern matching operator in SQL.
          What is the purpose of the ORDER BY clause in SQL queries?






Analytical/Conceptual Questions:
        Compare the functionality of DDL, DML, and DCL in SQL. How are they different from each other?
        Describe how joins work in SQL and discuss the different types of joins available. Provide use cases for each type.
        Explain the significance of constraints such as Primary Key, Foreign Key, and Unique in database design and their impact on data integrity.
        In SQL, what is the difference between WHERE and HAVING clauses? Provide examples of each.
        How does GROUP BY affect the result of a query in SQL? Provide a scenario where using GROUP BY is necessary.
        Explain how aggregate functions (such as SUM, AVG, COUNT) are used in SQL queries to summarize data.
        What are the advantages and disadvantages of using sub-queries versus joins in SQL? Provide examples.
        Discuss the importance of indexes when performing SELECT queries in SQL. How does indexing improve performance?
        Explain the use of views in SQL. How do they help in simplifying complex queries and managing security?
        Describe the role of SQL operators (such as BETWEEN, ANY, EXISTS) and give examples of each in real-world queries.





Numerical/Practical Problems:

          Problem 1. Consider the following relational database
          
                Employee (employee-name, street, city)
                          -------------
                Works (employee-Name, company-name, salary)
                       ------------- 
                Company (company-name, city)
                          -------------
                Manages (employee-name, manager-name)
                         -------------
          
          (i) find the company that has the most employees.
          (ii) find all employees in the database who live in the same city as 
               the companies they work for.
          (iii) find the names of all employees who work for first corporation bank.
          (iv) find all the employees who don’t work for first corporation bank.
          (v) find all those employees who work for first corporation 
              bank and earn more than 10,000.





UNIT 5 Query Processing [3 Hrs.]
**************************************************************

Short Answer Questions
          What is query processing in a database management system?
          Define query cost estimation and explain its importance in query processing.
          What are query operations in the context of query processing?
          What is the purpose of query optimization in a database?
          What does evaluation of expressions mean in query processing?
          Explain the difference between logical query plan and physical query plan.
          What are the major factors that influence query optimization?
          What is the role of indexes in improving query performance?
          How does cost-based optimization work in the context of query processing?
          What is a query execution plan and how does it relate to query optimization?
          



Analytical/Conceptual Questions
          Discuss the various steps involved in query processing, starting from parsing the query to its final execution.
          Explain the difference between selectivity and cost when estimating the query cost. How do these metrics influence the choice of query execution plans?
          In the context of query optimization, explain how the join ordering can impact the overall query performance.
          Describe the role of statistics in query optimization. How do statistics help in creating an optimal query execution plan?
          Explain how the nested loop join and hash join differ in terms of performance and use cases.
          How does query rewriting help in optimizing SQL queries? Provide examples of common optimizations made during query rewriting.
          Discuss the importance of parallel query processing and how it helps in improving query performance, especially for large datasets.
          What are the challenges in distributed query processing and how can query optimization address these challenges?
          Explain the concept of cost-based optimization in query processing. How does the system estimate the cost of different query execution strategies?
          What is the role of materialized views in query optimization, and how do they improve performance?



Numerical/Practical Problems
          Consider a simple query: SELECT * FROM Employees WHERE Department = 'HR'. 
          The table Employees has 100,000 records, and 5% of the records belong to 
          the 'HR' department. Estimate the selectivity of this query and explain 
          how this estimation affects the query cost.
          
          
          Assume that a query involves joining two tables, Orders and Customers. 
          The Orders table has 1 million rows, and the Customers table has 50,000 rows. 
          The query involves a hash join. Estimate the cost of the query, assuming 
          that the cost of a hash join is proportional to the number of records in both tables.
          
          
          Given a query that performs a nested loop join between two tables, 
          Products (500 rows) and Orders (1,000,000 rows), calculate the expected 
          number of disk accesses if the outer table is loaded into memory.
          
          
          A query execution plan is generated with two different strategies 
          for joining two tables: a merge join and a hash join. The cost of the
          merge join is 100 I/Os, and the cost of the hash join is 150 I/Os. 
          Which strategy should be chosen for optimal performance, and why?





Case Study: 
          A hotel reservation system handles thousands of queries per day to 
          check room availability, customer details, and booking status. One of 
          the most frequent queries is to check the availability of rooms for a specific
          date range and the customer's reservation details.
          
          Scenario:
                A query like 
                SELECT Room_ID, Room_Type FROM Rooms WHERE Room_Availability = 'Available' AND Date BETWEEN '2025-01-01' AND '2025-01-07'
                
                is often executed.
                The Rooms table has 50,000 rows, and the query is
                typically processed using a full table scan, which is slow and 
                inefficient for larger datasets.
          
          
          The system attempts to optimize this query using the following strategies:
                  Indexing: Creating an index on the Room_Availability and Date columns.
                  Query rewriting: Transforming the query into a more efficient form.
                  Join elimination: Eliminating unnecessary joins when possible.
          
          
          Questions:
                  How would indexing on the Room_Availability and Date columns help 
                  in optimizing the hotel reservation system's query performance?
                  
                  What impact does query rewriting have on the execution time of
                  the given query, and how could this be achieved in this case?
                  
                  Discuss the potential cost of performing a full table scan 
                  versus using an index scan in the context of the hotel reservation query.
                  
                  How would the optimization techniques, including indexing and
                  query rewriting, help in reducing the overall query cost for the system?













UNIT 6 File organization and indexing (3 Hrs)
**************************************************************

Short Answer Questions:
          What are disks and storage in the context of database management systems?
          Explain the concept of record organization into blocks and its significance in file storage.
          What is sequential file organization, and where is it most commonly used?
          Define indexed sequential file organization. How does it differ from sequential file organization?
          What is a B+ Tree index, and why is it commonly used in database systems?
          Explain the working principle of a hash index and its advantages over other types of indexes.
          What are the key differences between B+ Tree index and hash index?
          How does disk storage affect the performance of a database system?
          What are the advantages of sequential file organization in terms of query processing and data retrieval?
          How does indexed sequential file organization help in reducing search times compared to sequential file organization?




Analytical/Conceptual Questions:
        Compare sequential file organization and indexed sequential file organization in terms of performance, flexibility, and storage requirements.
        Explain how B+ Tree indexing works. What are the advantages of using B+ Trees in large-scale databases?
        Discuss how hash indexing works and in which scenarios it performs better compared to B+ Tree indexing.
        In a database system using indexed sequential file organization, describe how insertion, deletion, and updates are handled.
        How does block organization impact the performance of both file storage and retrieval? Explain its role in file and record organization.
        How does the choice of file organization affect query optimization and database performance? Provide examples.
        Compare the sequential and indexed sequential file organizations in terms of access time and storage efficiency.
        Explain the concept of disk storage structures and their impact on the design of a database management system.
        How does B+ Tree indexing ensure efficient range queries and ordered data retrieval?
        Discuss the factors that influence the choice of indexing method (e.g., B+ Tree index, hash index) in a given database system.







Numerical/Practical Problems:
        Given a database with 1,000,000 records and a record size of 100 bytes, calculate 
        the number of blocks required if the block size is 4 KB.
        
        If a B+ Tree index is built on a table with 1,000,000 records, and each node
        can store up to 100 keys, calculate the height of the tree.
        
        A database uses a hash index with a bucket size of 50 records. If the 
        database has 500,000 records, estimate how many buckets are required 
        and how many records will be in each bucket on average.
        
        In a sequential file organization with a block size of 8 KB and a record
        size of 400 bytes, calculate how many records can fit into one block.
        
        A file is stored in an indexed sequential file organization with a 
        primary index and a secondary index. If a search query requires accessing 
        both indexes, explain the impact on performance. How does the system 
        decide which index to use?
        




Case Study:
      An online retail system maintains a large database of products, 
      customers, and orders. The system uses a sequential file organization
      to store product details, while indexed sequential file organization
      is used for customer information. The order details are stored using a hash index for fast retrieval by order ID.
      
      Scenario:
          The system faces performance issues while retrieving product
          details based on their category. The product table has millions 
          of records, and as the table grows, the performance of queries 
          like SELECT * FROM Products WHERE Category = 'Electronics' degrades.
      
      The system team is considering switching to indexed sequential 
      file organization for the product table to improve query performance.
      They also plan to implement a B+ Tree index on the Category field 
      for faster retrieval.
      
      Questions:
            
            How does switching from sequential file organization to indexed
            sequential file organization improve query performance for retrieving
            products by category?
            
            What role does the B+ Tree index play in improving the performance
            of queries like SELECT * FROM Products WHERE Category = 'Electronics'?
            
            Discuss the potential performance trade-offs between using a B+ Tree
            index and a hash index for product retrieval in this retail system.
            
            How would block organization and file organization impact the
            overall performance of the retail system’s query processing, especially 
            when handling large product catalogs?
      










UNIT 7 Security (3 Hrs)
**************************************************************--
Short Answer Questions
      Why is security important in database systems? List three key reasons.
      Define integrity violations and provide two examples.
      What is access control, and how does it help in securing databases?
      Differentiate between authentication and authorization.
      Explain the role of database views in enhancing security.
      What are the major types of integrity constraints in databases?
      Briefly describe the process of encryption and decryption in database security.
      What is the significance of public-key encryption in securing databases?
      How does SQL provide support for access control? Give an example.
      What are the common security threats faced by modern database systems?
      



Analytical/Conceptual Questions
      Discuss the needs of database security in the context of modern data breaches.
      Explain how access control mechanisms ensure only authorized users can access specific data.
      Analyze the relationship between database views and data security. How can views be used to restrict access?
      Discuss the challenges of implementing authorization in multi-user database environments.
      Explain the process of symmetric encryption with an example. How does it differ from asymmetric encryption?
      Analyze the different types of integrity violations in databases and propose solutions to prevent them.
      How does role-based access control (RBAC) enhance database security?
      Discuss the advantages and limitations of encryption as a security measure in databases.
      Compare and contrast the SQL GRANT and REVOKE commands with suitable examples.
      Propose a comprehensive security framework for a hospital database system, highlighting access control, authorization, and encryption.
      


Numerical/Practical Problems

            Problem 1: Role-Based Access Control (RBAC)
            Consider a database with the following roles and permissions:
            
                Admin: Can create, update, delete, and view all records.
                Manager: Can update and view records.
                Employee: Can only view records.
            
            Assign the appropriate SQL commands to implement the above RBAC model for a 
            table EmployeeRecords.
            
            
            
            
            
            Problem 2: SQL GRANT and REVOKE
            You are managing a database table SalesData and need to enforce the following:
            
                User1 should only be able to read the table.
                User2 should be able to read and update the table.
                User3 should have full access to the table.
            
            Write the SQL commands to GRANT the permissions and later REVOKE update 
            access from User2.
            
            
            
            
            
            Problem 3: Encryption Process
            Consider the following scenario:
            
                A user wants to store sensitive customer data in a database, including credit card information.
                Use AES (Advanced Encryption Standard) for encryption.
            
            Describe the process of encrypting and decrypting the data in the database.
            Use pseudocode or SQL with an encryption function (e.g., ENCRYPT and DECRYPT).
            
            
            
            
            
            
            
            
            
            
            
            
            Problem 4: Security Violation Detection
            A database log records the following actions:
            
                User A modifies sensitive table FinanceData without permission.
                User B tries to access a table HRData but is denied access.
                User C creates a new unauthorized view of EmployeeSalaries.
            
            Identify the type of security or integrity violations for each action and propose 
            ways to prevent such incidents in the future.
            
            
            
            
            
            
            Problem 5: Designing Views for Security
            A retail store database contains a table CustomerData with the following columns:
            
                  CustomerID
                  Name
                  Address
                  PhoneNumber
                  PurchaseHistory
            
            Create a view that allows a sales employee to see only CustomerID, Name, and
            PurchaseHistory while restricting access to sensitive data like Address and
            PhoneNumber.
            
            







UNIT 8 Transaction and Concurrency Control [4 Hrs.]
**************************************************************

Short Answer Questions
      Define a transaction and list its ACID properties.
      Explain the concept of serializability in database transactions.
      Differentiate between conflict serializability and view serializability with examples.
      What is the purpose of concurrency control in a database system?
      Describe the two types of locks in a lock-based concurrency control mechanism.
      Explain the key differences between Two-Phase Locking (2PL) and Strict Two-Phase Locking (Strict 2PL).
      What is the timestamp ordering protocol, and how does it ensure concurrency?
      Define deadlock in the context of database transactions and list ways to handle it.
      What is the significance of a wait-die scheme in timestamp-based concurrency control?
      How does Strict 2PL guarantee recoverability in database transactions?



Analytical/Conceptual Questions
      Discuss the advantages and disadvantages of lock-based concurrency control.
      Explain the working of the Two-Phase Locking (2PL) protocol with the help of an example.
      Describe the concept of timestamp ordering and discuss how it avoids deadlocks.
      Compare lock-based concurrency control with timestamp-based concurrency control.
      Explain the concept of cascading rollback and how it can be avoided using Strict 2PL.
      Analyze the role of serial schedules in achieving consistency in concurrent transactions.
      Discuss the importance of concurrency control in maintaining the integrity of a database system.
      Explain the difference between shared locks and exclusive locks, and provide an example of their use.
      Discuss the challenges of handling starvation in lock-based concurrency control.
      Compare the wait-die and wound-wait schemes used in timestamp-based protocols.



      Problem 1: Serializability Check
      Consider the following two concurrent transactions:
      
               Transaction T1:
                  Read(A)
                  Write(A)
                  Read(B)
                  Write(B)
                 
                Transaction T2:
                  Read(B)
                  Write(B)
                  Read(A)
                  Write(A)
      
        Check if the schedule below is conflict-serializable:
      
                T1: Read(A)
                T2: Read(B)
                T1: Write(A)
                T2: Write(B)
                T1: Read(B)
                T2: Read(A)
                T1: Write(B)
                T2: Write(A)
      
      
      
      
      
      Problem 2: Two-Phase Locking (2PL)
      Given the following schedule:
      
              T1: Lock-X(A)
              T1: Read(A)
              T2: Lock-X(B)
              T2: Read(B)
              T1: Lock-X(B)
              T1: Write(B)
              T2: Lock-X(A)
              T2: Write(A)
      
        Verify if the above schedule follows the Two-Phase Locking protocol.
        Determine if the schedule is conflict-serializable.
      
      
      
      
      
      
      Problem 3: Timestamp Ordering
      Assume the following transactions with timestamps:
      
              T1: Timestamp = 5
              T2: Timestamp = 10
              The operations are as follows:
              
              T1: Read(A)
              T2: Write(A)
              T1: Write(A)
              T2: Read(A)
        Apply the timestamp ordering protocol and determine if the operations are allowed.
        Discuss the result and how conflicts are resolved.
        










UNIT 9 Backup and Recovery [3 Hrs.]
**************************************************************
Short Answer Questions:
          What are the different types of failure classifications in a database management system?
          Define atomicity in the context of database recovery and explain its importance.
          What is log-based recovery in databases? How does it ensure data consistency?
          What is shadow paging? Explain how it works in database recovery.
          Describe the role of the local recovery manager in a DBMS.
          What is the purpose of a backup system in database management?
          Explain the difference between full backup and incremental backup.
          What are the different methods used for failure recovery in database systems?
          How does checkpointing help in the recovery process?
          What is meant by consistent state in the context of database recovery?




Analytical/Conceptual Questions:
            Compare and contrast log-based recovery and shadow paging in terms of efficiency, complexity, and data consistency.
            Discuss how atomicity and durability are maintained during the recovery process after a system crash.
            Explain the process of log-based recovery and how it can be used to undo or redo transactions after a failure.
            How does checkpointing improve the performance of recovery operations in databases? Discuss its interaction with log-based recovery.
            Describe a scenario where shadow paging would be more advantageous over other recovery methods in a DBMS.
            What is the role of a local recovery manager? How does it coordinate with the main DBMS recovery manager to ensure data integrity and consistency?
            Explain how backup systems work in ensuring data availability and consistency during recovery. Provide examples of different types of backup strategies used in database systems.
            What is the impact of failure classifications (e.g., transaction failure, system failure, media failure) on the recovery strategy chosen for a database?
            Analyze the importance of recovery granularity (i.e., transaction-level, page-level, or log-level recovery) and how it affects system performance and consistency.
            Discuss how the failure classification affects the choice of a recovery mechanism and the trade-offs between performance and consistency.
            


Numerical/Practical Problems:

Given the following log entries for a database system:

                  T1: Begin Transaction
                  T1: Update Record 1
                  T2: Begin Transaction
                  T2: Update Record 2
                  T1: Commit
                  T2: Abort Write the steps for recovering the database 
                      after a system crash, using log-based recovery. What
                      would the database look like after recovery?
                      

    A system uses shadow paging for recovery. After a crash, the original page
    table and the shadow page table are available. Show how the shadow paging
    mechanism helps in recovering the database to a consistent state.
    
    
    Suppose you have a database system with a log-based recovery approach. 
    The log entries show a transaction sequence with updates on pages. If 
    a system crash occurs just after a commit operation for a transaction, 
    explain how recovery will proceed, and how to use rollback to undo the 
    effects of incomplete transactions.








UNIT 10 Object oriented Database [2 Hrs.]
**************************************************************

Short Answer Questions
      What is an Object-Oriented Database Management System (OODMS)?
      List the main differences between a relational database and an object-oriented database.
      What are the primary advantages of using OODMS over traditional relational databases?
      Define the term "object" in the context of OODMS.
      What is encapsulation in object-oriented databases?
      What are the key features of an Object-Oriented Database Management System (OODMS)?
      Explain inheritance in OODMS with an example.
      What is polymorphism in the context of an OODMS?
      What role does message passing play in an OODMS?
      How do OODMS handle relationships between objects?




Analytical/Conceptual Questions
        Explain the concept of encapsulation in object-oriented databases and how it helps in managing complex data.
        Discuss the advantages and challenges of integrating Object-Oriented Database Management Systems (OODMS) with existing relational database systems.
        How does inheritance in OODMS improve data consistency and reuse? Provide an example from a real-world scenario.
        Explain the concept of persistence in object-oriented databases. How does it differ from the persistence mechanism used in relational databases?
        Analyze the role of OODMS in handling complex relationships and data types, especially in multimedia and CAD/CAM applications.
        What are the use cases where Object-Oriented Database Management Systems (OODMS) are preferred over traditional relational databases?
        How does the support for polymorphism in OODMS enhance flexibility in database design?
        How do OODMS handle the challenges of data redundancy and integrity in object-based applications?
        Discuss the role of OODMS in software engineering, particularly in the development of large-scale, object-oriented applications.
        Compare and contrast OODMS with Object-Relational Database Management Systems (ORDBMS). What are the key differences and similarities?



Numerical/Practical Problems
        In an OODMS, you have two classes: Employee and Manager. The Employee 
        class has attributes like Employee_ID, Name, and Salary, while the Manager
        class inherits from Employee and adds the Department attribute. Show the
        inheritance relationship in a UML diagram and explain how data is inherited.
        
        
        Consider a scenario where you are managing a multimedia database with images,
        videos, and audio files. How would an OODMS handle these data types differently
        than a relational database?
        
        
        
        Given the following objects in an OODMS:
                Object Student with attributes Student_ID, Name, Date_of_Birth, and Major.
                Object Course with attributes Course_ID, Course_Name, and Credits.
               
            Write the object-oriented schema for these two classes, incorporating 
            relationships (e.g., "Student enrolls in Course").
            
        
        Given a set of objects in an OODMS, describe how message passing is
        used to access and modify the attributes of an object. Provide an example 
        scenario where message passing is beneficial.








Case Study:

        A library system needs to store information about books, authors, and borrowers. In
        an Object-Oriented Database Management System (OODMS), a Book class might have
        attributes such as Book_ID, Title, Author, and Borrower, and methods for borrowing
        and returning the book. The Author class could have attributes like Author_ID, Name, 
        and Nationality, and methods for adding or updating author information. The Borrower
        class might have attributes like Borrower_ID, Name, and Membership_Date, with
        methods for borrowing books.
        
        
        The use of OODMS helps in modeling these entities as objects, each with their own
        attributes and behaviors. This provides flexibility and ease of maintenance, 
        especially when dealing with complex relationships between books, authors, and 
        borrowers. Furthermore, OODMS allows for inheritance and polymorphism, enabling
        efficient reuse of code and data structures.
        
        Questions 
              How does object-orientation help in modeling complex relationships
              in a library management system?
              
              What advantages does OODMS offer over a relational database in
              managing data for a library system?
              
              Explain how inheritance and polymorphism could be applied to 
              improve the flexibility of the library system.
              
              Discuss how an OODMS could handle data persistence in the context
              of the library system.



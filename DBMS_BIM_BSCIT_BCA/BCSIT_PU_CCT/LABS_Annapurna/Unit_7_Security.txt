






docker run --name mydb1 -e MYSQL_ROOT_PASSWORD=1234 -d mysql
docker exec -ti mydb1 mysql -u root -p








********************************************************************************
********************************************************************************
Granting and Revoking Privileges:
********************************************************************************
********************************************************************************



-- Create Hospital Management System (HMS) database
CREATE DATABASE HospitalManagementSystem;
USE HospitalManagementSystem;




-- Create the Hospital table
CREATE TABLE Hospital (
    PatientID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender VARCHAR(10),
    Diagnosis VARCHAR(100),
    RoomNumber INT
);








-- Create Student Management System (SMS) database
CREATE DATABASE StudentManagementSystem;
USE StudentManagementSystem;




-- Create the Student table
CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender VARCHAR(10),
    Major VARCHAR(50)
);










-- Insert 10 records into the Hospital table
INSERT INTO HospitalManagementSystem.Hospital VALUES
(1, 'John', 'Doe', 35, 'Male', 'Appendicitis', 101),
(2, 'Jane', 'Smith', 42, 'Female', 'Fractured Arm', 205),
(3, 'Mike', 'Johnson', 28, 'Male', 'Influenza', 303),
(4, 'Emily', 'Williams', 55, 'Female', 'Diabetes', 402),
(5, 'David', 'Brown', 47, 'Male', 'Hypertension', 105),
(6, 'Anna', 'Miller', 32, 'Female', 'Migraine', 201),
(7, 'Brian', 'Jones', 25, 'Male', 'Sprained Ankle', 304),
(8, 'Sophia', 'Davis', 38, 'Female', 'Pneumonia', 102),
(9, 'Daniel', 'Clark', 43, 'Male', 'Heart Attack', 401),
(10, 'Olivia', 'Taylor', 29, 'Female', 'Allergy', 203);








-- Insert 10 records into the Student table
INSERT INTO StudentManagementSystem.Student VALUES
(101, 'Alice', 'Johnson', 20, 'Female', 'Computer Science'),
(102, 'Bob', 'Smith', 22, 'Male', 'Electrical Engineering'),
(103, 'Catherine', 'Brown', 21, 'Female', 'Psychology'),
(104, 'David', 'White', 23, 'Male', 'Mechanical Engineering'),
(105, 'Eva', 'Williams', 19, 'Female', 'Biology'),
(106, 'Frank', 'Jones', 24, 'Male', 'Chemistry'),
(107, 'Grace', 'Davis', 20, 'Female', 'Business Administration'),
(108, 'Harry', 'Clark', 22, 'Male', 'Political Science'),
(109, 'Isabel', 'Taylor', 21, 'Female', 'Mathematics'),
(110, 'Jack', 'Miller', 23, 'Male', 'Physics');






mysql> select * from HospitalManagementSystem.Hospital;
+-----------+-----------+----------+------+--------+----------------+------------+
| PatientID | FirstName | LastName | Age  | Gender | Diagnosis      | RoomNumber |
+-----------+-----------+----------+------+--------+----------------+------------+
|         1 | John      | Doe      |   35 | Male   | Appendicitis   |        101 |
|         2 | Jane      | Smith    |   42 | Female | Fractured Arm  |        205 |
|         3 | Mike      | Johnson  |   28 | Male   | Influenza      |        303 |
|         4 | Emily     | Williams |   55 | Female | Diabetes       |        402 |
|         5 | David     | Brown    |   47 | Male   | Hypertension   |        105 |
|         6 | Anna      | Miller   |   32 | Female | Migraine       |        201 |
|         7 | Brian     | Jones    |   25 | Male   | Sprained Ankle |        304 |
|         8 | Sophia    | Davis    |   38 | Female | Pneumonia      |        102 |
|         9 | Daniel    | Clark    |   43 | Male   | Heart Attack   |        401 |
|        10 | Olivia    | Taylor   |   29 | Female | Allergy        |        203 |
+-----------+-----------+----------+------+--------+----------------+------------




mysql> select * from StudentManagementSystem.Student;
+-----------+-----------+----------+------+--------+-------------------------+
| StudentID | FirstName | LastName | Age  | Gender | Major                   |
+-----------+-----------+----------+------+--------+-------------------------+
|       101 | Alice     | Johnson  |   20 | Female | Computer Science        |
|       102 | Bob       | Smith    |   22 | Male   | Electrical Engineering  |
|       103 | Catherine | Brown    |   21 | Female | Psychology              |
|       104 | David     | White    |   23 | Male   | Mechanical Engineering  |
|       105 | Eva       | Williams |   19 | Female | Biology                 |
|       106 | Frank     | Jones    |   24 | Male   | Chemistry               |
|       107 | Grace     | Davis    |   20 | Female | Business Administration |
|       108 | Harry     | Clark    |   22 | Male   | Political Science       |
|       109 | Isabel    | Taylor   |   21 | Female | Mathematics             |
|       110 | Jack      | Miller   |   23 | Male   | Physics                 |
+-----------+-----------+----------+------+--------+-------------------------+







-- Create Users
 CREATE USER 'sanjeev'@'localhost' IDENTIFIED BY 'password1';


 CREATE USER 'ohm'@'localhost' IDENTIFIED BY 'password2';


 CREATE USER 'ashok'@'localhost' IDENTIFIED BY 'password3';


CREATE USER 'manoj'@'localhost' IDENTIFIED BY 'password4';


.
mysql> SELECT user FROM mysql.user;
                    +------------------+
                    | user             |
                    +------------------+
                    | root             |
                    | ashok            |
                    | manoj            |
                    | mysql.infoschema |
                    | mysql.session    |
                    | mysql.sys        |
                    | ohm              |
                    | root             |
                    | sanjeev          |
                    +------------------+



mysql> SELECT COUNT(user) AS total_users FROM mysql.user;
                    +-------------+
                    | total_users |
                    +-------------+
                    |           9 |
                    +-------------+





USE HospitalManagementSystem;
-----------------------------------

-- Grant SELECT privilege to Sanjeev on Hospital table
GRANT SELECT ON Hospital TO 'sanjeev'@'localhost';

-- Grant INSERT and UPDATE privileges to Ohm on Hospital table
GRANT INSERT, UPDATE ON Hospital TO 'ohm'@'localhost';

-- Grant DELETE privilege to Ashok on Hospital table
GRANT DELETE ON Hospital TO 'ashok'@'localhost';

-- Grant ALL privileges to Manoj on Hospital table
GRANT ALL ON Hospital TO 'manoj'@'localhost';










                    CHECKING AND ANALYSISNG on HospitalManagementSystem
                    --------------------------- ----------------------


                    mysql> exit
                    Bye
                    bash-4.4# mysql -u sanjeev -p
                    Enter password: password1
                     
                    mysql> USE HospitalManagementSystem;
                    mysql> select * from Hospital;              ........works fine ok select
+-----------+-----------+----------+------+--------+----------------+------------+
| PatientID | FirstName | LastName | Age  | Gender | Diagnosis      | RoomNumber |
+-----------+-----------+----------+------+--------+----------------+------------+
|         1 | John      | Doe      |   35 | Male   | Appendicitis   |        101 |
|         2 | Jane      | Smith    |   42 | Female | Fractured Arm  |        205 |





                             
                              mysql> delete from Hospital where PatientID=1;          ....... dont work for delete , due to PriVILIGES
                              ERROR 1142 (42000): DELETE command denied to user 'sanjeev'@'localhost' for table 'Hospital'


                              mysql> INSERT INTO Hospital VALUES
                             (11, 'Shyam', 'Dhakal', 37, 'Male', 'Appendicitis', 101);        ....... dont work for insert , due to PriVILIGES
    








                    mysql> exit
                    Bye

                    bash-4.4# mysql -u ohm -ppassword2

                    USE HospitalManagementSystem;

                    mysql> select * from Hospital;
                    ERROR 1142 (42000): SELECT command denied to user 'ohm'@'localhost' for table 'Hospital'
                    
                    
                    mysql> INSERT INTO Hospital VALUES
                         (11, 'Shyam', 'Dhakal', 37, 'Male', 'Appendicitis', 101);
                    Query OK, 1 row affected (0.02 sec)                   ...... works fine PRIVILIGES WORKS 














                    mysql> exit
                    Bye

                    bash-4.4# mysql -u ashok -ppassword3
                    
                    mysql> USE HospitalManagementSystem;
                    Reading table information for completion of table and column names
                    You can turn off this feature to get a quicker startup with -A
                    
                    Database changed



                    mysql> select * from Hospitals;
                        ERROR 1142 (42000): SELECT command denied to user 'ashok'@'localhost' for table 'Hospitals'

                    mysql>  delete from Hospital where PatientID=1;
                       ERROR 1143 (42000): SELECT command denied to user 'ashok'@'localhost' for column 'PatientID' in table 'Hospital'















                    mysql> exit
                    Bye


                    bash-4.4# mysql -u manoj -ppassword4
                     mysql> USE HospitalManagementSystem;
                    
                    mysql> select * from Hospital;
+-----------+-----------+----------+------+--------+----------------+------------+
| PatientID | FirstName | LastName | Age  | Gender | Diagnosis      | RoomNumber |
+-----------+-----------+----------+------+--------+----------------+------------+
|         1 | John      | Doe      |   35 | Male   | Appendicitis   |        101 |
|         2 | Jane      | Smith    |   42 | Female | Fractured Arm  |        205 |







                    mysql>  delete from Hospital where PatientID=10;
                    Query OK, 1 row affected (0.02 sec)




                    mysql> select * from Hospital;
+-----------+-----------+----------+------+--------+----------------+------------+
| PatientID | FirstName | LastName | Age  | Gender | Diagnosis      | RoomNumber |
+-----------+-----------+----------+------+--------+----------------+------------+
|         1 | John      | Doe      |   35 | Male   | Appendicitis   |        101 |
|         2 | Jane      | Smith    |   42 | Female | Fractured Arm  |        205 |
|         3 | Mike      | Johnson  |   28 | Male   | Influenza      |        303 |
|         4 | Emily     | Williams |   55 | Female | Diabetes       |        402 |
|         5 | David     | Brown    |   47 | Male   | Hypertension   |        105 |
|         6 | Anna      | Miller   |   32 | Female | Migraine       |        201 |
|         7 | Brian     | Jones    |   25 | Male   | Sprained Ankle |        304 |
|         8 | Sophia    | Davis    |   38 | Female | Pneumonia      |        102 |
|         9 | Daniel    | Clark    |   43 | Male   | Heart Attack   |        401 |
|        11 | Shyam     | Dhakal   |   37 | Male   | Appendicitis   |        101 |
+-----------+-----------+----------+------+--------+----------------+------------+
10 rows in set (0.00 sec)



































USE StudentManagementSystem;
---------------------------------- CHOOSE AS PER YOUR NEED....

-- Grant SELECT privilege to Sanjeev on Student table
 GRANT SELECT ON Student TO 'sanjeev'@'localhost';

-- Grant INSERT and UPDATE privileges to Ohm on Student table
 GRANT INSERT, UPDATE ON Student TO 'ohm'@'localhost';


-- Grant DELETE privilege to Ashok on Student table
 GRANT DELETE ON Student TO 'ashok'@'localhost';


-- Grant ALL privileges to Manoj on Student table
 GRANT ALL ON Student TO 'manoj'@'localhost';


















                    CHECKING AND ANALYSISNG
                    --------------------------- REVOKING HospitalManagementSystem


USE HospitalManagementSystem;

-- Revoke SELECT privilege from all users on Hospital table
REVOKE SELECT ON Hospital FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';


-- Revoke INSERT and UPDATE privileges from all users on Hospital table
REVOKE INSERT, UPDATE ON Hospital FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';


-- Revoke DELETE privilege from all users on Hospital table
REVOKE DELETE ON Hospital FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';








                      CHECKING AND ANALYSISNG
                    --------------------------- REVOKING StudentManagementSystem

USE StudentManagementSystem;

-- Revoke SELECT privilege from all users on Student table
REVOKE SELECT ON Student FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';

-- Revoke INSERT and UPDATE privileges from all users on Student table
REVOKE INSERT, UPDATE ON Student FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';

-- Revoke DELETE privilege from all users on Student table
REVOKE DELETE ON Student FROM 'sanjeev'@'localhost', 'ohm'@'localhost', 'ashok'@'localhost', 'manoj'@'localhost';











































********************************************************
********************************************************
ENC and DEC
******************************************************** 
********************************************************
            COPY BACK of  ....... controlplane $ ....... ONLY




Step 1: 
Install package, run browser(80), remove file, 
add yours content file
---------------------------

controlplane $ sudo apt install apache2 -y



http://<your_server_ip>            #open port 80
or
https://254435fd-3cdd-400d-b798-ce5d9192b88c-10-244-4-216-80.spch.r.killercoda.com/



controlplane $ cd /var/www/html/
controlplane $ rm index.html

controlplane $ cat > plain_file.txt
            
            hello for the lab of security.....
            
            this is a plain text file ....






Step 2: Encrypt the File
---------------------------
Use the openssl command to encrypt the file with AES:

controlplane $ openssl enc -aes-256-cbc -salt -in plain_file.txt -out encrypted_file.txt
enter aes-256-cbc encryption password: apple
Verifying - enter aes-256-cbc encryption password: apple



        Explanation:
        --------------
                    enc: Invoke the encryption command.
                    -aes-256-cbc: Use AES encryption with a 256-bit key in CBC mode.
                    -salt: Add a salt to strengthen encryption.
                    -in plain_file.txt: Input file to encrypt.
                    -out encrypted_file.bin: Output encrypted file.







Step 3: refesh the browser
---------------------------
NOW refesh the browser and try to open both files




Step 4: read via terminal
---------------------------
controlplane $ ls
encrypted_file.txt  plain_file.txt



controlplane $ cat > plain_file.txt
            
            hello for the lab of security.....
            
            this is a plain text file ....




controlplane $ cat encrypted_file.txt 
Salted__9:#E4,_~<9nJV&FЦpWRnR"FG%w<4









Step 5: Decrypt the File
---------------------------
Use the openssl command to decrypt the file:

controlplane $ openssl enc -d -aes-256-cbc -in encrypted_file.txt -out decrypted_
file.txt
enter aes-256-cbc decryption password:



                Explanation:
                ---------------
                        -d: Decrypt mode.
                        -in encrypted_file.bin: Input encrypted file.
                        -out decrypted_file.txt: Output decrypted file.







Step 6: refesh the browser
---------------------------
NOW refesh the browser and try to open both files




Step 7: read via terminal
---------------------------

controlplane $ ls
decrypted_file.txt  encrypted_file.txt  plain_file.txt

            controlplane $ cat decrypted_file.txt 
            
            hello for the lab of security.....
            
            this is a plain text file ....










******************************************************** 
********************************************************




























********************************************************
********************************************************
CIA Triad
******************************************************** 
********************************************************
            COPY BACK of  ....... controlplane $ ....... ONLY





To perform a CIA Triad (Confidentiality, Integrity, and Availability) 

lab on the files (decrypted_file.txt, encrypted_file.txt, and plain_file.txt),

follow these steps:




Step 1: Assess Confidentiality
--------------------------------------
        Confidentiality refers to ensuring that only 
        authorized users can access the file's data.
        
        We will test encryption to ensure confidentiality.
        
        Check Encryption of Files: 
        --------------------------
            Ensure the encrypted file
            is not human-readable (i.e., it is protected).


controlplane $ cat encrypted_file.txt
Salted__9:#E4,_~<9nJV&FЦpWRnR"FG%w<4
                                    oSIcontrolplane $ 



            The output should be unreadable (binary content). 
            If the content is readable, the encryption process
            did not work correctly.



        Decrypt the File: 
        ----------------------
            To test if only authorized users can read
            the file, you need the password used for encryption.

controlplane $ openssl enc -d -aes-256-cbc -in encrypted_file.txt -out decrypted_file_test.txt
enter aes-256-cbc decryption password: apple


            Enter the password used during encryption 
            when prompted. If you don’t have the correct password,
            the output will not be usable.
            








Step 2: Assess Integrity
------------------------------
            Integrity ensures that the file has not been tampered
            with and remains in its original state.
            
            Generate a Hash for the Original File:
            ---------------------------------------
                    Use sha256sum to
                    generate the hash of the original (plaintext) file.
                    
                    This hash can be used to verify the integrity of the 
                    file after encryption or transmission.
                    


controlplane $ sha256sum plain_file.txt
08753afe94ce71ead13933c0bb380697254590ddc25952f4ca7723a64ea91676  plain_file.txt



            Generate a Hash for the Decrypted File:
            ---------------------------------------
                    After decrypting the file, generate a hash of
                    the decrypted file.
        
controlplane $ sha256sum decrypted_file.txt
08753afe94ce71ead13933c0bb380697254590ddc25952f4ca7723a64ea91676  decrypted_file.





                    Compare this hash to the hash of the original file.
                    If they match, the file has maintained its integrity.
                    If the hashes are different, the file has been modified
                    or corrupted.
                    








Step 3: Assess Availability
----------------------------
            Availability ensures that the file is accessible when
            needed and is not corrupted or lost.
            
            Check the File Availability: 
            ------------------------------
                    Ensure the files are accessible in the current directory.
            

controlplane $ ls -l decrypted_file.txt encrypted_file.txt plain_file.txt
-rw-r--r-- 1 root root 69 Dec 27 07:52 decrypted_file.txt
-rw-r--r-- 1 root root 96 Dec 27 07:50 encrypted_file.txt
-rw-r--r-- 1 root root 69 Dec 27 07:46 plain_file.txt




            Make a Backup for Availability: 
            --------------------------------
                    Create a backup 
                    of the original file to ensure that it is available 
                    even if the original file is lost or corrupted.


controlplane $ cp plain_file.txt plain_file_backup.txt


controlplane $ ls -l
-rw-r--r-- 1 root root 69 Dec 27 07:52 decrypted_file.txt
-rw-r--r-- 1 root root 69 Dec 27 08:05 decrypted_file_test.txt
-rw-r--r-- 1 root root 96 Dec 27 07:50 encrypted_file.txt
-rw-r--r-- 1 root root 69 Dec 27 07:46 plain_file.txt
-rw-r--r-- 1 root root 69 Dec 27 08:10 plain_file_backup.txt




controlplane $ cat plain_file_backup.txt 

            hello for the lab of security.....
            
            this is a plain text file ....





Simulate File Corruption (Optional for testing):
-----------------------------------------------

            You can corrupt the file (e.g., truncate it or modify it) 
            to see if it affects availability.

controlplane $ echo "Corrupted data" >> plain_file.txt


            After corruption, try to access the file:





controlplane $ cat plain_file.txt
            
            hello for the lab of security.....
            
            this is a plain text file ....
            
            Corrupted data






            If you get readable data, you might have
            compromised the file's availability. To restore it, 
            you would use the backup you created earlier:



controlplane $ cp plain_file_backup.txt plain_file.txt

controlplane $ cat plain_file.txt 

            hello for the lab of security.....
            
            this is a plain text file ....








        
        
        Summary of CIA Evaluation
        ---------------------------------
                After performing these tests, you should
                summarize your findings as follows:
                            
                            Confidentiality: 
                                Was the file securely encrypted, and can it only
                                be accessed by those with the correct decryption key?
                            
                            
                            Integrity: 
                                Did the hash comparison indicate that the 
                                file maintained its integrity throughout encryption, 
                                decryption, and storage?
                            
                            
                            Availability: 
                                Were you able to back up the file and restore it
                                if necessary? Was the file available for access?
                            



******************************************************** 
********************************************************
          




















********************************************************
********************************************************
Database Security in SQL
******************************************************** HASHING via md5 / encryption and decryption of data ......
********************************************************





SQL Script for Database Creation and Data Insertion
---------------------------------------------------
-- Step 1: Create the database
CREATE DATABASE secure_base;
use secure_base





-- Step 2: Create a table with encryption capability
CREATE TABLE momo (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name NVARCHAR(50) NOT NULL,
    address NVARCHAR(100) NOT NULL,
    username NVARCHAR(50) NOT NULL,
    password VARBINARY(256) NOT NULL
);


                                                NVARCHAR and VARCHAR are data types 
                                                used in databases to store text.
                                                Here's a comparison of the two:
                                                
                                                1. Character Encoding
                                                        NVARCHAR: 
                                                            Supports Unicode, allowing storage of 
                                                            multilingual data (e.g., Chinese, Arabic, Cyrillic). 
                                                            Each character typically takes up 2 bytes.
                                                        
                                                        VARCHAR: 
                                                            Stores non-Unicode data, meaning it supports 
                                                            only the database's default character set (e.g., ASCII
                                                            or extended ASCII). Each character typically takes 1 byte.
                                                
                                                2. Storage Size
                                                        NVARCHAR: 
                                                            Requires more storage space 
                                                            because of Unicode support (2 bytes per character).
                                                        
                                                        VARCHAR: 
                                                            Requires less storage space as it stores
                                                            characters in a single byte (in most character sets).
                                                
                                                3. Use Case
                                                        NVARCHAR: 
                                                            Ideal for applications that need to 
                                                            store data in multiple languages or symbols that
                                                            require Unicode representation.
                                                        
                                                        VARCHAR: 
                                                            Suitable for storing data in one language
                                                            or character set, especially if saving space is a priority.
                                                         
                                                4. Performance
                                                        NVARCHAR: 
                                                            Slightly slower due to its larger 
                                                            size and Unicode processing.
                                                        
                                                        VARCHAR:
                                                            Faster in terms of storage
                                                            and retrieval for non-Unicode data.
                                                            






-- Step 3: Insert data (random Nepali-flavored data in English script)
-- Using AES_ENCRYPT for encryption (MySQL syntax)

INSERT INTO momo (name, address, username, password)
VALUES
('Ram', 'Kathmandu-1', 'ram123', AES_ENCRYPT('ramPassword2024', 'NepaliDataPass@2024')),
('Sita', 'Pokhara-5', 'sita456', AES_ENCRYPT('sitaPassword2024', 'NepaliDataPass@2024')),
('Gita', 'Lalitpur-3', 'gita789', AES_ENCRYPT('gitaPassword2024', 'NepaliDataPass@2024')),
('Hari', 'Dharan-8', 'hari321', AES_ENCRYPT('hariPassword2024', 'NepaliDataPass@2024')),
('Krishna', 'Butwal-6', 'krishna654', AES_ENCRYPT('krishnaPassword2024', 'NepaliDataPass@2024')),
('Rita', 'Janakpur-2', 'rita987', AES_ENCRYPT('ritaPassword2024', 'NepaliDataPass@2024')),
('Shyam', 'Biratnagar-4', 'shyam111', AES_ENCRYPT('shyamPassword2024', 'NepaliDataPass@2024')),
('Laxmi', 'Chitwan-9', 'laxmi222', AES_ENCRYPT('laxmiPassword2024', 'NepaliDataPass@2024')),
('Bina', 'Dhangadhi-7', 'bina333', AES_ENCRYPT('binaPassword2024', 'NepaliDataPass@2024')),
('Nabin', 'Hetauda-11', 'nabin444', AES_ENCRYPT('nabinPassword2024', 'NepaliDataPass@2024'));






SQL Script for Data Decryption and Display
------------------------------------------------
-- Step 4: Decrypt the data while displaying it

SELECT
    id,
    name,
    address,
    username,
    CAST(AES_DECRYPT(password, 'NepaliDataPass@2024') AS CHAR) AS decrypted_password
FROM momo;






mysql> select * from momo;
+----+---------+--------------+------------+--------------------------------------------------------------------+
| id | name    | address      | username   | password                                                           |
+----+---------+--------------+------------+--------------------------------------------------------------------+
|  1 | Ram     | Kathmandu-1  | ram123     | 0x3D74F6CD4C7B9B826C1A84A4AA4DCDB7                                 |
|  2 | Sita    | Pokhara-5    | sita456    | 0x9DF48999793F66C72947A2DE13F7A1D0810102BB32FA2D7F68A6AAAB80171F16 |
|  3 | Gita    | Lalitpur-3   | gita789    | 0xC452786DB36DC18727603E15A24A458B810102BB32FA2D7F68A6AAAB80171F16 |
|  4 | Hari    | Dharan-8     | hari321    | 0x357B9DC42BBE30F403A9743867171FCD810102BB32FA2D7F68A6AAAB80171F16 |
|  5 | Krishna | Butwal-6     | krishna654 | 0x51509C74DB18E4EFCF1EC7F3BDFC874F8D5567710CC857040254F43CC121EF92 |
|  6 | Rita    | Janakpur-2   | rita987    | 0x8BDAF70FFE42E117AAD6DC220B80DE11810102BB32FA2D7F68A6AAAB80171F16 |
|  7 | Shyam   | Biratnagar-4 | shyam111   | 0xDB8525935AE899730B016B005021239C1892492C5A96E5925C024344DCE95C5C |
|  8 | Laxmi   | Chitwan-9    | laxmi222   | 0x2FABEE0255F9845BAA0C3379186F40281892492C5A96E5925C024344DCE95C5C |
|  9 | Bina    | Dhangadhi-7  | bina333    | 0x3AA09285F0DD751A0D96A466E741BA70810102BB32FA2D7F68A6AAAB80171F16 |
| 10 | Nabin   | Hetauda-11   | nabin444   | 0xC997F7F892D7F13800910A523FB35F981892492C5A96E5925C024344DCE95C5C |
+----+---------+--------------+------------+--------------------------------------------------------------------+ 
                                                                    Encrypted / Cipherd password.... V V V  GOOD
10 rows in set (0.00 sec)





mysql> SELECT
    ->     id,
    ->     name,
    ->     address,
    ->     username,
    ->     CAST(AES_DECRYPT(password, 'NepaliDataPass@2024') AS CHAR) AS decrypted_password
    -> FROM momo;
+----+---------+--------------+------------+---------------------+
| id | name    | address      | username   | decrypted_password  |
+----+---------+--------------+------------+---------------------+
|  1 | Ram     | Kathmandu-1  | ram123     | ramPassword2024     |
|  2 | Sita    | Pokhara-5    | sita456    | sitaPassword2024    |
|  3 | Gita    | Lalitpur-3   | gita789    | gitaPassword2024    |
|  4 | Hari    | Dharan-8     | hari321    | hariPassword2024    |
|  5 | Krishna | Butwal-6     | krishna654 | krishnaPassword2024 |
|  6 | Rita    | Janakpur-2   | rita987    | ritaPassword2024    |
|  7 | Shyam   | Biratnagar-4 | shyam111   | shyamPassword2024   |
|  8 | Laxmi   | Chitwan-9    | laxmi222   | laxmiPassword2024   |
|  9 | Bina    | Dhangadhi-7  | bina333    | binaPassword2024    |
| 10 | Nabin   | Hetauda-11   | nabin444   | nabinPassword2024   |
+----+---------+--------------+------------+---------------------+   
                    Decrypted / de ciphred password ...... GOOD for MAIN for                                                                  
                    ROOT admin only and knows key='NepaliDataPass@2024'
10 rows in set (0.00 sec)





Explanation of Steps
--------------------------
            Database and Table Creation: 
                    A database named NepaliDataDB is created, and a 
                    table momo is defined with encrypted data fields.
            
            Encryption Method: 
                    The AES_ENCRYPT function in MySQL is used for encryption. 
                    A passphrase (NepaliDataPass@2024) is used to encrypt the password field.
            
            Data Insertion: 
                    Sample Nepali-flavored data (names,
                    locations, usernames, and passwords written in English
                    script) is encrypted and stored.
            
            Data Decryption: 
                    The AES_DECRYPT function is used to decrypt 
                    the passwords and display them as plain text when queried.



Notes
-----------
        The AES_ENCRYPT and AES_DECRYPT functions require a 
        passphrase to encrypt and decrypt data.
        
        Ensure the passphrase is securely stored and not 
        hard-coded in production environments.
        
        Password management and access control are 
        critical to securing sensitive data.
        
        For real-world applications, implement role-based access control (RBAC)
        to restrict access to sensitive information.









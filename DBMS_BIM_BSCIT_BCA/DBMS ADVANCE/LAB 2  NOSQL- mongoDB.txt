
*******************************
NoSQL
*******************************




NoSQL, which stands for "not only SQL," 
is a term used to describe a category of 
database systems that do not strictly adhere
to the traditional relational database management 
system (RDBMS) model. 



Unlike traditional SQL databases, NoSQL databases
are designed to handle various types of 
unstructured, semi-structured, or structured data.








Key characteristics of NoSQL databases include:
==================================================

Schema flexibility: 
-------------------
NoSQL databases allow you to store and manage data without a fixed schema. 
This flexibility is particularly useful when dealing with dynamic or evolving 
data structures.


Horizontal scalability: 
------------------------
NoSQL databases are often designed to scale horizontally, meaning they can 
efficiently handle a growing amount of data by adding more nodes to a distributed 
system.


Support for different data models: 
----------------------------------
NoSQL databases support various data models, such as key-value pairs, 
document-oriented (like MongoDB), column-family stores, and graph databases. 
Each type is optimized for specific types of queries and data structures.


High performance:
------------------
Many NoSQL databases are optimized for specific use cases, providing high 
performance and low-latency access to data.


Distributed architecture: 
-------------------------
NoSQL databases are often designed to be distributed across multiple servers 
or nodes, allowing them to handle large volumes of data and provide fault 
tolerance.








Common types of NoSQL databases include:
==============================================


Document-oriented databases: 
----------------------------
Store and retrieve data in the form of documents (e.g., MongoDB).


Key-value stores: 
-------------------
Use a simple key-value pair for data storage (e.g., Redis, Cassandra).


Column-family stores: 
---------------------
Organize data into columns instead of rows (e.g., Apache Cassandra, HBase).



Graph databases: 
------------------
Optimize for storing and querying graph-like data structures (e.g., Neo4j).





NoSQL databases are often favored in scenarios where the data requirements 
are not well-defined in advance, or where rapid development and scalability 
are essential, such as in web applications, real-time analytics, and large-scale 
distributed systems. 

However, it's important to note that the choice between NoSQL and traditional SQL 
databases depends on the specific needs and characteristics of the project









*******************************
NoSQL - MongoDB
*******************************

MongoDB is a popular open-source NoSQL database management
system that falls under the category of document-oriented databases. 

It is designed to store, query, and retrieve data in a flexible, schema-free 
JSON-like format known as BSON (Binary JSON). 

MongoDB is developed and maintained by MongoDB Inc.







Key features of MongoDB include:
====================================



Document-Oriented: 
---------------------------
MongoDB stores data in flexible, JSON-like documents called BSON (Binary JSON). 
Each document can have a different structure, allowing for dynamic and evolving 
data models.



Schema Flexibility: 
---------------------------
MongoDB does not require a predefined schema, allowing developers to insert 
data without first defining its structure. 
This flexibility is particularly beneficial in scenarios where the data 
model may change over time.



Rich Query Language: 
---------------------------
MongoDB provides a powerful query language that supports a wide 
range of queries, including filtering, sorting, and projection. 
It also supports indexing for efficient query performance.




Horizontal Scalability: 
---------------------------
MongoDB is designed to scale horizontally by sharding, which involves 
distributing data across multiple servers or nodes. 
This enables MongoDB to handle large amounts of data and high traffic loads.




High Performance: 
---------------------------
MongoDB is optimized for high-performance reads and writes. 
It uses a storage engine that supports automatic sharding and provides 
features like in-memory storage and compression.



Aggregation Framework: 
---------------------------
MongoDB includes a powerful aggregation framework that allows for complex 
data processing and transformation within the database.




Geospatial Indexing: 
---------------------------
MongoDB supports geospatial indexing and queries, making it suitable for 
applications that require location-based features.





Community and Ecosystem: 
---------------------------
MongoDB has a large and active community, and it offers a rich ecosystem of 
tools, libraries, and connectors for various programming languages.





MongoDB is commonly used in a variety of applications, including content 
management systems, e-commerce platforms, real-time analytics, and other 
scenarios where flexibility, scalability, and quick development are essential. 

It is often chosen for projects that involve large amounts of unstructured or 
semi-structured data.







	Here are some common MongoDB commands:
	===========================================

	Connecting to MongoDB:
	--------------------------------
	$mongo
	
	This command opens the MongoDB shell, allowing you to interact 
	with the database using the MongoDB query language.




	Show All Databases:
	--------------------------------
	$show dbs

	Lists all available databases.





	Switch Database:
	--------------------------------
	$use <database_name>

	Switches to the specified database or creates it if it doesn't exist.






	Show Collections:
	--------------------------------

	$show collections

	Lists all collections in the current database.




	Insert Document:
	--------------------------------

	$db.collection_name.insert({ key: "value", key2: "value2" })

	Inserts a document into the specified collection.






	Find Documents:
	--------------------------------

	$db.collection_name.find()
	
	Retrieves all documents from the specified collection.






	Query with Filter:
	--------------------------------

	$db.collection_name.find({ key: "value" })
	Retrieves documents based on a specified filter.






	Update Document:
	--------------------------------

	$db.collection_name.update({ key: "old_value" }, { $set: { key: "new_value" } })

	Updates a document in the collection.






	Remove Document:
	--------------------------------

	$db.collection_name.remove({ key: "value" })

	Removes documents from the collection based on a specified filter.







	Indexing:
	--------------------------------

	$db.collection_name.createIndex({ key: 1 })

	Creates an index on a specific field for improved query performance.






	Aggregation:
	--------------------------------

	$db.collection_name.aggregate([
  		{ $match: { key: "value" } },
  		{ $group: { _id: "$key", count: { $sum: 1 } } }
	])

	Performs aggregation operations on the data in the collection.







	Count Documents:
	--------------------------------

	$db.collection_name.count()

	Returns the count of documents in the collection.





	Drop Database:
	--------------------------------

	$db.dropDatabase()

	Deletes the current database.

















========= USING docker or used TUNED APP for MongoDB ==============


TUNED APP	https://www.mongodb.com/


------------------------DOCKER------------------------------

step 1: Login with credentials in ... https://killercoda.com/
step 2: Choose scnerio CKA or Playground

step 3: [SQL-lunch]   docker run --name mydb1 -e MYSQL_ROOT_PASSWORD=1234 -d mysql
	[SQL-execute] docker exec -ti mydb1 bash
				OR
		      docker exec -ti mydb1 mysql -u root -p1234




step 4: [MongoDB-syntax] docker run -d -p 27017:27017 --name my-mongo-container -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=your_mongo_password mongo

			 docker exec -it my-mongo-container mongosh -u admin -p your_mongo_password --authenticationDatabase admin


	[MongoDB-lunch]   docker run -d -p 27017:27017 --name my-mongo -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin1234 mongo
	[MongoDB-execute] docker exec -it my-mongo  mongosh -u "admin" -p admin1234 --authenticationDatabase admin
				OR
			   docker exec -it my-mongo bash  
			   mongosh -u "admin" -p admin1234 --authenticationDatabase admin            
                           

[MongoDB-running Logs]	   docker logs -f  my-mongo

***************************************************************************
















*******************************
EXAMPLE 1

https://www.mongodb.com/docs/mongodb-shell/
*******************************




create and swiche to the librarydb database:
-------------------------------------

test> use librarydb
switched to db librarydb




Insert Data into a Collection:
-------------------------------------
librarydb> db.books.insertMany([
    { title: "Introduction to Programming", author: "John Smith", category: "Computer Science" },
    { title: "History of Science", author: "Jane Doe", category: "History" },
    { title: "Mathematics for Beginners", author: "Bob Johnson", category: "Mathematics" }
])





Display the Data:
-------------------------------------
librarydb> db.books.find()
[
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9a'),
    title: 'Introduction to Programming',
    author: 'John Smith',
    category: 'Computer Science'
  },
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9b'),
    title: 'History of Science',
    author: 'Jane Doe',
    category: 'History'
  },
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9c'),
    title: 'Mathematics for Beginners',
    author: 'Bob Johnson',
    category: 'Mathematics'
  }
]









Insert Unmanaged Data into a Collection:
-------------------------------------
librarydb> db.books.insertMany([
... {title: "sanjeev thapa" , address: "palpa", degree: "be", mob: "9815489555"}
... ])
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('65afd26931b1a9aa6a6d7c9d') }
}











Display the Data:
-------------------------------------

librarydb> db.books.find()
[
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9a'),
    title: 'Introduction to Programming',
    author: 'John Smith',
    category: 'Computer Science'
  },
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9b'),
    title: 'History of Science',
    author: 'Jane Doe',
    category: 'History'
  },
  {
    _id: ObjectId('65afd16131b1a9aa6a6d7c9c'),
    title: 'Mathematics for Beginners',
    author: 'Bob Johnson',
    category: 'Mathematics'
  },
  {
    _id: ObjectId('65afd26931b1a9aa6a6d7c9d'),
    title: 'sanjeev thapa',
    address: 'palpa',
    degree: 'be',
    mob: '9815489555'
  }
]































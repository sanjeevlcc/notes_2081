UNIT 9 Advance Architectures [4 Hrs.]
9.1 RISC and CISC Fundamentals
9.2 Instruction Pipeline, Register window 
9.3 Flynn’s Taxonomy, MIMD system topologies and architectures
9.4 Introduction to multicore architecture 








Lets some rebound knowledge
-----------------------------
LAB on : github codespace
            sudo su -
            cd




Motherboard
---------------
      Definition: 
      ----------
      The main printed circuit board (PCB) in a computer.
      
      
      Function: 
      ----------
      Connects and allows communication between various components, 
      including the CPU, memory, storage, and input/output devices.
      


                  
                  ...........................................................................
                  .                               Motherboard                                .
                  ...........................................................................
                  .                                                                           .
                  .    +-----------------------+    +---------------------+    +----------+  .
                  .    |      Processor        |<-->|      Chipset        |<-->|  Memory  |  .
                  .    +-----------------------+    +---------------------+    +----------+  .
                  .            |                         |                        |           .
                  .            |                         |                        |           .
                  .            V                         V                        V           .
                  .     +--------------+        +----------------+       +----------------+  .
                  .     |  Power Supply|<------>| Voltage Regulator|<--->| Expansion Slots |  .
                  .     +--------------+        +----------------+       +----------------+  .
                  .                                                                           .
                  .        |                                                                .
                  .        V                                                                .
                  .     +---------------+                                                   .
                  .     |  BIOS/UEFI    |<-------------------------------------------------+.
                  .     +---------------+                                                  |.
                  .          |                                                             |.
                  .          V                                                             |.
                  .   +---------------+                                                    |.
                  .   |  Storage      |                                                    |.
                  .   +---------------+                                                    |.
                  .        |                                                              |.
                  .        V                                                              |.
                  .    +---------------+                                                  |.
                  .    |  I/O Ports    |<-------------------------------------------------+.
                  .    +---------------+                                                  |.
                  .        |                                                              |.
                  .        V                                                              |.
                  .    +----------------+                                                 |.
                  .    |  Peripheral    |<------------------------------------------------+.
                  .    +----------------+                                                 |.
                  ...........................................................................





Processor (CPU)
----------------
      Definition: 
      --------------
          The central processing unit (CPU) is the primary component 
          of a computer that performs most of the processing inside a computer.
      
      Function: 
      --------------
          Executes instructions from programs, performs arithmetic 
          and logical operations, and controls input/output operations.





              
              root ➜ ~ $ lscpu  | less
              
              Architecture:                       x86_64
              CPU op-mode(s):                     32-bit, 64-bit
              Byte Order:                         Little Endian
              Address sizes:                      48 bits physical, 48 bits virtual
              CPU(s):                             2
              On-line CPU(s) list:                0,1
              Thread(s) per core:                 2
              Core(s) per socket:                 1
              Socket(s):                          1
              NUMA node(s):                       1
              Vendor ID:                          AuthenticAMD
              CPU family:                         25
              Model:                              1
              Model name:                         AMD EPYC 7763 64-Core Processor
              Stepping:                           1
              CPU MHz:                            2636.570
              BogoMIPS:                           4890.86
              Virtualization:                     AMD-V
              Hypervisor vendor:                  Microsoft
              Virtualization type:                full
              L1d cache:                          32 KiB
              L1i cache:                          32 KiB
              L2 cache:                           512 KiB
              L3 cache:                           32 MiB
              NUMA node0 CPU(s):                  0,1




               


Socket
----------
      Definition: 
      ----------
          A physical interface on the motherboard where 
          the processor (CPU) is installed.
      
      Function: 
      ----------
          Provides electrical and mechanical connections 
          between the CPU and the motherboard.
    

            root ➜ ~ $ lscpu | grep 'Socket(s)'
            Socket(s):                          1


Core
----------
      Definition: 
      ----------
          A core is an individual processing unit within a CPU. 
          Modern CPUs can have multiple cores (dual-core, quad-core, etc.).
      
      
      Function: 
      ----------
          Each core can independently execute instructions, allowing
          for parallel processing and improved performance for 
          multi-threaded applications.
          

            root ➜ ~ $ lscpu | grep 'Core(s) per socket'
            Core(s) per socket:                 1






Pipeline
----------
        Definition: 
        ----------
        A technique used in CPUs to execute multiple 
        instructions in overlapping phases.
        
        
        Function: 
        ----------
        Divides the execution process into stages (e.g., fetch, decode, execute), 
        increasing instruction throughput and overall CPU performance.


                  cat /proc/cpuinfo
                  cat /proc/cpuinfo | grep 'model name\|cpu cores\|siblings'
                  
                  
                  sudo dmidecode -t processor
                  dmesg | grep -i dma
                  sudo lshw -class dma
                  cat /proc/dma
                  sudo dmidecode -t 8




Single Processor
--------------------
        Definition: 
        ----------
            A computing system with one CPU.
        
        
        Function: 
        ----------
            Executes instructions sequentially on a single core or processor.






Memory
----------
    Definition: 
    ----------
        Components or devices that store data and instructions for the CPU.
        
        Types:
        
          RAM (Random Access Memory): Volatile memory used for temporary storage while a computer is running.
        
          ROM (Read-Only Memory): Non-volatile memory used for permanent storage of firmware.
        
        Storage Memory: Includes SSDs, HDDs, and other long-term storage devices.


                  root ➜ ~ $ free -h
                                total        used        free      shared  buff/cache   available
                  Mem:          7.7Gi       1.3Gi       154Mi        64Mi       6.3Gi       6.1Gi
                  Swap:            0B          0B          0B






I/O (Input/Output)
---------------

      Definition: 
      ----------
          Interfaces and devices used for communication between a computer and the outside world.
      
      Types: 
      ----------
          Includes keyboards, mice, monitors, printers, network interfaces, and external storage devices.






HLL (High-Level Language)
------------------------------
        Definition: 
            Programming languages that are closer to human languages 
            and abstract away much of the hardware details.
        
        Examples: 
            C,C++,Python, Java, C++, and JavaScript.
        
        Function: 
            Easier to read, write, and maintain compared to low-level languages.
        



LLL (Low-Level Language)
------------------------------
        Definition: 
            Programming languages that provide little or no abstraction
            from a computer's instruction set architecture.
        
        Examples: Assembly language, machine code.
        
        Function: 
            More control over hardware, efficient performance, 
            but harder to read and write.
        



ALL (Assembly Level Language)
------------------------------
        Definition: 
            A low-level programming language that uses mnemonic codes
            and labels to represent machine-level code instructions.
        
        
        Function: 
            Provides a more readable way to write machine
            instructions, closely related to the hardware.




MLL (Machine Level Language)
------------------------------
      Definition: 
          The lowest-level programming language, consisting of binary 
          code that the CPU can directly execute.
      
      
      Function: 
          Represents instructions in binary form, directly executed 
          by the CPU, very efficient but difficult for humans to understand and write.
          


c code for time checking 
-----------------------------optional , not course
                        root ➜ ~ $ cat > num.c
                        #include <stdio.h>
                        
                        int main() {
                            int i;
                            
                            // Print numbers from 1 to 1 million
                            for(i = 1; i <= 1000; i++) {
                                printf("%d\n", i);
                            }
                            
                            return 0;
                        }
                        
                        
                        
                        root ➜ ~ $ gcc -o num num.c
                        
                        root ➜ ~ $ ./num



                        root ➜ ~ $ time ./num 
                        real    0m0.028s
                        user    0m0.000s
                        sys     0m0.009s




c++ code for time checking 
-----------------------------optional , not course

                        root ➜ ~/c++ $ cat > num.cpp 
                        
                        
                        #include <iostream>
                        using namespace std;
                        
                        int main() {
                            // Print numbers from 1 to 1 million
                            for(int i = 1; i <= 1000000; i++) {
                                cout << i << endl;
                            }
                            
                            return 0;
                        }
                        
                        
                        root ➜ ~/c++ $ g++ -o num num.cpp
                        root ➜ ~/c++ $ ./num
                        
                        
                        root ➜ ~/c++ $ time ./num
                        real    0m0.007s
                        user    0m0.000s
                        sys     0m0.007s






python code for time checking 
-----------------------------optional , not course

                        
                        root ➜ ~ $ mkdir python1
                        root ➜ ~ $ cd python1/
                        root ➜ ~/python1 $ 
                        
                        
                        
                        root ➜ ~/python1 $ cat > num.py
                        
                        # Python program to print numbers from 1 to 1 million
                        def print_numbers():
                            # Print numbers from 1 to 1 million
                            for i in range(1, 1000):
                                print(i)
                        
                        if __name__ == "__main__":
                            print_numbers()
                        
                        
                        
                        root ➜ ~/python1 $ python num.py
                        
                        root ➜ ~/python1 $ time python num.py
                        
                        real    0m0.024s
                        user    0m0.008s
                        sys     0m0.016s















======================================================================
9.1 RISC and CISC Fundamentals
======================================================================

RISC (Reduced Instruction Set Computer):
-----------------------------------------
Design Philosophy: Uses a small, highly optimized set of instructions. Emphasizes efficiency with a focus on executing instructions quickly.


Characteristics:
    Simple instructions that execute in a single clock cycle.
    Large number of general-purpose registers.
    Load/store architecture, where memory operations are separate from arithmetic and logic operations.
    Fixed instruction length for easier decoding.



CISC (Complex Instruction Set Computer):
-----------------------------------------
Design Philosophy: Uses a large set of instructions, some of which can execute complex tasks in a single instruction. Aims to reduce the number of instructions per program.


Characteristics:
      Complex instructions that may take multiple clock cycles to execute.
      Fewer general-purpose registers.
      Variable instruction length.
      Many addressing modes.


      Common RISC architectures include ARM, MIPS, and SPARC, 
      while common CISC architectures are based on the x86 and x86-64 (also known as AMD64)
      instruction sets.

                  root ➜ ~ $ lscpu
                  Architecture:                       x86_64
                  CPU op-mode(s):                     32-bit, 64-bit
                  Byte Order:                         Little Endian
                  Address sizes:                      48 bits physical, 48 bits virtual
                  CPU(s):                             2
                  On-line CPU(s) list:                0,1
                  Thread(s) per core:                 2
                  Core(s) per socket:                 1
                  Socket(s):                          1
                  NUMA node(s):                       1
                  Vendor ID:                          AuthenticAMD
                  CPU family:                         25
                  Model:                              1
                  Model name:                         AMD EPYC 7763 64-Core Processor
                  Stepping:                           1
                  CPU MHz:                            2963.484
                  BogoMIPS:                           4890.84
                  Virtualization:                     AMD-V
                  Hypervisor vendor:                  Microsoft






                  root ➜ ~ $ cat /proc/cpuinfo | grep 'model name\|arch'
                  model name      : AMD EPYC 7763 64-Core Processor
                  model name      : AMD EPYC 7763 64-Core Processor

                  Interpreting the Results:
                        x86/x86_64 (AMD64):
                              These are CISC architectures, typically
                              used in Intel and AMD processors.
                        
                        ARM, MIPS, SPARC:
                              These are RISC architectures, often used
                              in mobile devices, embedded systems, and servers.








                  lscpu for an x86_64 CPU (CISC):
                  
                  Architecture:        x86_64
                  CPU op-mode(s):      32-bit, 64-bit
                  Byte Order:          Little Endian
                  CPU(s):              4
                  On-line CPU(s) list: 0-3
                  Thread(s) per core:  2
                  Core(s) per socket:  2
                  Socket(s):           1
                  NUMA node(s):        1
                  Vendor ID:           GenuineIntel
                  CPU family:          6
                  Model:               142
                  Model name:          Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz
                  
                                    
                                    lscpu for an ARM CPU (RISC):
                                    
                                    Architecture:        aarch64
                                    CPU op-mode(s):      32-bit, 64-bit
                                    Byte Order:          Little Endian
                                    CPU(s):              8
                                    On-line CPU(s) list: 0-7
                                    Thread(s) per core:  1
                                    Core(s) per socket:  8
                                    Socket(s):           1
                                    Vendor ID:           ARM
                                    Model:               1
                                    Model name:          Cortex-A72

======================================================================
9.2 Instruction Pipeline, Register window 
======================================================================



======================================================================
9.3 Flynn’s Taxonomy, MIMD system topologies and architectures
======================================================================



======================================================================
9.4 Introduction to multicore architecture 
======================================================================









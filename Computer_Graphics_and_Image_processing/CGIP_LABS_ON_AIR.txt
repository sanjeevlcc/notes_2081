

https://cse19-iiith.vlabs.ac.in/exp/image-histogram/index.html

=========================
histogram labs
=========================


To perform histogram labs of image processing visually using Docker, you 
can follow these steps. We'll create a Docker environment that includes necessary
libraries (such as OpenCV and Jupyter Notebook) to perform and visualize histogram operations on images.



Step 1: Create a Dockerfile
----------------------------------
First, create a Dockerfile that sets up a Python environment with OpenCV and Jupyter Notebook. This will allow us to interactively work on image processing tasks.

# Use the official Python image from the Docker Hub
FROM python:3.8-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libsm6 \
    libxext6 \
    libxrender-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip install \
    opencv-python-headless \
    matplotlib \
    jupyter

# Set the working directory in the container
WORKDIR /workspace

# Copy the current directory contents into the container at /workspace
COPY . /workspace

# Expose the port for Jupyter Notebook
EXPOSE 8888

# Run Jupyter Notebook
CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]






Step 2: Build the Docker Image
----------------------------------
Navigate to the directory containing your Dockerfile and build the Docker image.


docker build -t image-processing-histogram .




Step 3: Run the Docker Container
----------------------------------
Run the container with port mapping to access Jupyter Notebook from your host machine.

docker run -p 8888:8888 -v $(pwd):/workspace image-processing-histogram




Step 4: Access Jupyter Notebook
----------------------------------
Open your web browser and navigate to 


http://localhost:8888. 


You should see the Jupyter Notebook interface. If a token is required, it will be
displayed in the terminal where you ran the Docker command.



Step 5: Create a Jupyter Notebook for Histogram Processing
--------------------------------------------------------------------
Create a new Jupyter Notebook and add the following code to perform histogram operations on an image.

Code: Histogram Processing
Upload an Image

First, upload an image to the working directory of your Jupyter Notebook.



Histogram Processing Code
Create a new Jupyter Notebook cell and add the following code:

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load an image from file
image = cv2.imread('your_image.jpg', cv2.IMREAD_GRAYSCALE)

# Calculate the histogram
hist = cv2.calcHist([image], [0], None, [256], [0, 256])

# Plot the histogram
plt.figure()
plt.title("Grayscale Histogram")
plt.xlabel("Bins")
plt.ylabel("# of Pixels")
plt.plot(hist)
plt.xlim([0, 256])
plt.show()

# Display the original image
plt.figure()
plt.title("Original Image")
plt.imshow(image, cmap='gray')
plt.axis('off')
plt.show()


Replace 'your_image.jpg' with the name of the image file you uploaded.



Step 6: Visualize Histogram and Image
----------------------------------------------------------
Run the notebook cell to visualize the histogram and the original image. 
You should see the histogram plot showing the distribution of pixel intensities and the original 
grayscale image displayed below it.



Conclusion
----------------------------------------------------------
By following these steps, you have set up a Docker container with a Jupyter 
Notebook environment to perform and visualize histogram operations on images using OpenCV. 
This approach allows you to interactively explore image processing techniques and view the results in real-time.




==================================












































































To perform histogram labs in C, you can create a program that reads an image, 
computes its histogram, and displays the results using a library such as OpenCV.
Hereâ€™s a step-by-step guide to set up the environment using Docker and write a
C program to perform histogram operations on an image.

Step 1: Set Up Docker Environment
-----------------------------------
First, create a Dockerfile that sets up an environment with OpenCV and necessary tools to compile and run C programs.


# Use the official Ubuntu image
FROM ubuntu:20.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    python3-dev \
    python3-pip

# Install OpenCV
RUN apt-get install -y libopencv-dev

# Set the working directory in the container
WORKDIR /workspace

# Copy the current directory contents into the container at /workspace
COPY . /workspace

# Set the entry point
ENTRYPOINT ["/bin/bash"]






Step 2: Build the Docker Image
-----------------------------------
Navigate to the directory containing your Dockerfile and build the Docker image.

docker build -t c-opencv-histogram .






Step 3: Run the Docker Container
-----------------------------------
Run the container with an interactive terminal session to compile and run your C programs.


docker run -it --rm -v $(pwd):/workspace c-opencv-histogram







Step 4: Write the C Program for Histogram Processing
----------------------------------------------------------------------
Create a file named histogram.c in your working directory and add the following code:


#include <opencv2/opencv.hpp>
#include <stdio.h>

using namespace cv;

int main(int argc, char** argv) {
    if (argc != 2) {
        printf("Usage: %s <image_path>\n", argv[0]);
        return -1;
    }

    // Read the image file
    Mat image = imread(argv[1], IMREAD_GRAYSCALE);
    if (image.empty()) {
        printf("Could not open or find the image\n");
        return -1;
    }

    // Calculate the histogram
    int histSize = 256;
    float range[] = { 0, 256 };
    const float* histRange = { range };
    Mat hist;
    calcHist(&image, 1, 0, Mat(), hist, 1, &histSize, &histRange);

    // Normalize the result to [0, histImage.rows]
    normalize(hist, hist, 0, 400, NORM_MINMAX, -1, Mat());

    // Create an image to display the histogram
    int hist_w = 512, hist_h = 400;
    int bin_w = cvRound((double)hist_w / histSize);
    Mat histImage(hist_h, hist_w, CV_8UC1, Scalar(0));

    // Draw the histogram
    for (int i = 1; i < histSize; i++) {
        line(histImage, Point(bin_w * (i - 1), hist_h - cvRound(hist.at<float>(i - 1))),
             Point(bin_w * i, hist_h - cvRound(hist.at<float>(i))),
             Scalar(255), 2, 8, 0);
    }

    // Display the original image
    namedWindow("Original Image", WINDOW_AUTOSIZE);
    imshow("Original Image", image);

    // Display the histogram
    namedWindow("Histogram", WINDOW_AUTOSIZE);
    imshow("Histogram", histImage);

    waitKey(0); // Wait for any keystroke in the window

    return 0;
}






Step 5: Compile the C Program
-----------------------------------
Inside the Docker container, compile the histogram.c file using the following command:


g++ -o histogram histogram.c `pkg-config --cflags --libs opencv4`






Step 6: Run the C Program
-----------------------------------
Run the compiled program with the path to your image file:


./histogram path_to_your_image.jpg




This program reads an image, computes its histogram, normalizes 
the histogram, and displays both the original image and the histogram using OpenCV.








Conclusion
-----------------------------------
By following these steps, you can set up a Docker environment and write a 
C program to perform histogram operations on an image.
This approach uses OpenCV for image processing tasks, leveraging its powerful
functionalities and ease of use in handling image data.

































**************************************************************************
**************************************************************************
LAB :  JPEG and JPEG 2000 compression                           START
**************************************************************************
**************************************************************************
Creating a web-based lab for JPEG and JPEG 2000 compression involves 
setting up a simple web interface using HTML and JavaScript, 
and using a backend to handle the compression tasks.

The backend can be implemented using Python with Flask,
which will handle the file uploads and compression operations.




Install Required Tools
-----------------------
First, ensure you have Python, Flask, ImageMagick, and OpenJPEG installed. You can install Flask using pip and the other tools using apt.


sudo apt update
sudo apt install imagemagick openjpeg-tools -y
sudo apt install imagemagick -y
pip install Flask



Create the Project Directory
-------------------------------
Create a directory for your project and navigate into it:


mkdir ~/image_compression_lab
cd ~/image_compression_lab




Create the HTML Frontend
----------------------------
Create an index.html file inside a templates directory:


mkdir templates
nano templates/index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Compression Lab</title>
</head>
<body>
    <h1>Image Compression Lab</h1>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <label for="file">Choose an image to compress (JPEG, PNG):</label><br>
        <input type="file" id="file" name="file" accept="image/*"><br><br>
        <button type="submit">Upload and Compress</button>
    </form>
    <div id="result">
        {% if result %}
            <h2>Compression Results:</h2>
            <p>Original file size: {{ result.original_size }}</p>
            <p>JPEG compressed file size: {{ result.jpeg_size }}</p>
            <p>JPEG 2000 compressed file size: {{ result.jpeg2000_size }}</p>
            <a href="{{ result.jpeg_url }}" download>Download JPEG</a><br>
            <a href="{{ result.jpeg2000_url }}" download>Download JPEG 2000</a>
        {% endif %}
    </div>
</body>
</html>










Create the Flask Backend
--------------------------
Create a app.py file for your Flask application:



nano app.py

import os
from flask import Flask, request, render_template, send_from_directory
from werkzeug.utils import secure_filename
import subprocess

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['COMPRESSED_FOLDER'] = 'compressed'

if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

if not os.path.exists(app.config['COMPRESSED_FOLDER']):
    os.makedirs(app.config['COMPRESSED_FOLDER'])

def is_tool(name):
    """Check whether `name` is on PATH and marked as executable."""
    from shutil import which
    return which(name) is not None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['file']
    if file:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        jpeg_output = os.path.join(app.config['COMPRESSED_FOLDER'], 'compressed_image.jpg')
        jpeg2000_output = os.path.join(app.config['COMPRESSED_FOLDER'], 'compressed_image.jp2')

        if is_tool('convert'):
            subprocess.run(['convert', filepath, '-quality', '85', jpeg_output])
            jpeg_size = os.path.getsize(jpeg_output)
        else:
            jpeg_size = None
            print("ImageMagick convert tool not found")

        if is_tool('opj_compress'):
            subprocess.run(['opj_compress', '-i', filepath, '-o', jpeg2000_output])
            jpeg2000_size = os.path.getsize(jpeg2000_output)
        else:
            jpeg2000_size = None
            print("OpenJPEG opj_compress tool not found")

        original_size = os.path.getsize(filepath)

        result = {
            'original_size': f'{original_size / 1024:.2f} KB',
            'jpeg_size': f'{jpeg_size / 1024:.2f} KB' if jpeg_size else 'N/A',
            'jpeg2000_size': f'{jpeg2000_size / 1024:.2f} KB' if jpeg2000_size else 'N/A',
            'jpeg_url': f'/compressed/compressed_image.jpg' if jpeg_size else '',
            'jpeg2000_url': f'/compressed/compressed_image.jp2' if jpeg2000_size else ''
        }

        return render_template('index.html', result=result)

@app.route('/compressed/<filename>')
def download_file(filename):
    return send_from_directory(app.config['COMPRESSED_FOLDER'], filename)

if __name__ == '__main__':
    app.run(debug=True)






 Run the Flask Application
-----------------------------
Run the Flask application by executing the following command:


python app.py




sample image

https://filesamples.com/samples/image/jpeg/sample_5184%C3%973456.jpeg













**************************************************************************
**************************************************************************
LAB : JPEG and JPEG 2000 compression                               END
**************************************************************************
**************************************************************************

















**************************************************************************
**************************************************************************
LAB : Logic Operations involving Binary Images                      START
**************************************************************************
**************************************************************************

We'll create a simple Flask web application to upload
binary images and perform logical operations on them.







go via root
----------------

@sanjeevlcc âžœ /workspaces/cnlabs (main) $ sudo su -
root âžœ /workspaces/cnlabs $ cd
root âžœ ~ $ 







Step 1: Install Flask and OpenCV.
-------------------------------------
root âžœ ~ $ pip install Flask opencv-python-headless




Step 2: Create the Flask application.
--------------------------------------------
root âžœ ~ $ mkdir flask_app
root âžœ ~ $ cd flask_app

root âžœ ~/flask_app $ 



Step 3: Create the necessary files.
--------------------------------------


root âžœ ~/flask_app $ cat > app.py

from flask import Flask, request, render_template, send_file
import cv2
import numpy as np
import os

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'results'

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

@app.route('/')
def upload_form():
    return render_template('upload.html')

@app.route('/upload', methods=['POST'])
def upload_image():
    if 'file1' not in request.files or 'file2' not in request.files:
        return 'No file part'

    file1 = request.files['file1']
    file2 = request.files['file2']

    if file1.filename == '' or file2.filename == '':
        return 'No selected file'

    img1_path = os.path.join(UPLOAD_FOLDER, 'image1.png')
    img2_path = os.path.join(UPLOAD_FOLDER, 'image2.png')
    file1.save(img1_path)
    file2.save(img2_path)

    img1 = cv2.imread(img1_path, 0)
    img2 = cv2.imread(img2_path, 0)

    operations = {
        'AND': cv2.bitwise_and(img1, img2),
        'OR': cv2.bitwise_or(img1, img2),
        'NOT': cv2.bitwise_not(img1),
        'XOR': cv2.bitwise_xor(img1, img2),
    }

    results = {}
    for op_name, result_img in operations.items():
        result_path = os.path.join(RESULT_FOLDER, f'result_{op_name.lower()}.png')
        cv2.imwrite(result_path, result_img)
        results[op_name] = result_path

    return render_template('results.html', results=results)

@app.route('/result/<operation>')
def get_result(operation):
    result_path = os.path.join(RESULT_FOLDER, f'result_{operation.lower()}.png')
    return send_file(result_path)

if __name__ == '__main__':
    app.run(debug=True)





web UI
------------


root âžœ ~/flask_app $ mkdir templates




root âžœ ~/flask_app $ cat > templates/upload.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Upload Images</title>
  </head>
  <body>
    <h1>Upload Binary Images</h1>
    <form method="post" action="/upload" enctype="multipart/form-data">
      <input type="file" name="file1" accept="image/png" required>
      <input type="file" name="file2" accept="image/png" required>
      <button type="submit">Upload</button>
    </form>
  </body>
</html>







root âžœ ~/flask_app $ cat > templates/results.html


<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Results</title>
  </head>
  <body>
    <h1>Operation Results</h1>
    <ul>
      {% for operation, result_path in results.items() %}
        <li>
          <strong>{{ operation }}:</strong> <a href="{{ url_for('get_result', operation=operation) }}">View Result</a>
        </li>
      {% endfor %}
    </ul>
    <a href="/">Upload More Images</a>
  </body>
</html>




before run
-------------------
root âžœ ~/flask_app $ tree
.
â”œâ”€â”€ app.py
â””â”€â”€ templates
    â”œâ”€â”€ results.html
    â””â”€â”€ upload.html






Run the Flask Application
---------------------------------
Run the Flask application in your Linux terminal.

This will start the Flask server, and 
you can access the application in your 
web browser at http://127.0.0.1:5000/.



root âžœ ~/flask_app $ export FLASK_APP=app.py
root âžœ ~/flask_app $ flask run


 * Serving Flask app 'app.py'
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5000
Press CTRL+C to quit







image download
-----------------

https://stockcake.com/?utm_source=google&utm_medium=cpc&utm_campaign=homepage&gad_source=1&gclid=CjwKCAjwp4m0BhBAEiwAsdc4aMPmJuixSbUEtChLpEOBoZxYclo6v3Qn5ydgPrJzvQOuf3Rqz842kBoCQd0QAvD_BwE







after run
-------------

root âžœ ~/flask_app $ tree
.
â”œâ”€â”€ __pycache__
â”‚   â””â”€â”€ app.cpython-310.pyc
â”œâ”€â”€ app.py
â”œâ”€â”€ results
â”‚   â”œâ”€â”€ result_and.png
â”‚   â”œâ”€â”€ result_not.png
â”‚   â”œâ”€â”€ result_or.png
â”‚   â””â”€â”€ result_xor.png
â”œâ”€â”€ templates
â”‚   â”œâ”€â”€ results.html
â”‚   â””â”€â”€ upload.html
â””â”€â”€ uploads
    â”œâ”€â”€ image1.png
    â””â”€â”€ image2.png

4 directories, 10 files















**************************************************************************
**************************************************************************
LAB :Logic Operations involving Binary Images                       END
**************************************************************************
**************************************************************************





















**************************************************************************
**************************************************************************
LAB :                      START
**************************************************************************
**************************************************************************
d
**************************************************************************
**************************************************************************
LAB :                             END
**************************************************************************
**************************************************************************





















**************************************************************************
**************************************************************************
LAB :                      START
**************************************************************************
**************************************************************************
d
**************************************************************************
**************************************************************************
LAB :                             END
**************************************************************************
**************************************************************************




















**************************************************************************
**************************************************************************
LAB :                      START
**************************************************************************
**************************************************************************
d
**************************************************************************
**************************************************************************
LAB :                             END
**************************************************************************
**************************************************************************
